<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE MudletPackage>
<MudletPackage version="1.001">
	<AliasPackage>
		<AliasGroup isActive="yes" isFolder="yes">
			<name>Rents</name>
			<script></script>
			<command></command>
			<packageName></packageName>
			<regex></regex>
			<Alias isActive="yes" isFolder="no">
				<name>Show all rents</name>
				<script>local rents_db = db:get_database("rents")

local storage = db:fetch(rents_db.storage)

if table.is_empty(storage) then
  rents:echo("No items found in the rent database.\n", false, true)
else
  rents:display_items(storage)
end</script>
				<command></command>
				<packageName></packageName>
				<regex>^rents show$</regex>
			</Alias>
			<Alias isActive="yes" isFolder="no">
				<name>Rents show name</name>
				<script>local name = matches[2]

local rents_db = db:get_database("rents")

local storage = db:fetch(rents_db.storage, db:like(rents_db.storage.name,name))

if table.is_empty(storage) then
  rents:echo(f"No items for the character \"{name}\" found in the rent database.\n", false, true)
else
  rents:display_items(storage)
end</script>
				<command></command>
				<packageName></packageName>
				<regex>^rents show name (.+)$</regex>
			</Alias>
			<Alias isActive="yes" isFolder="no">
				<name>Rents show item</name>
				<script>local name = matches[2]

local rents_db = db:get_database("rents")

local storage = {}

if name == "rare" then
  for _, rare in pairs(rents.rares) do
    storage = table.n_union(storage, db:fetch(rents_db.storage, db:like(rents_db.storage.item, f"%{rare}%")))
  end
elseif name == "angreal" then
  for _, angreal in pairs(rents.angreal) do
    storage = table.n_union(storage, db:fetch(rents_db.storage, db:like(rents_db.storage.item, f"%{angreal}%")))
  end
else
  storage = db:fetch(rents_db.storage, db:like(rents_db.storage.item, f"%{name}%"))
end

if table.is_empty(storage) then
  rents:echo(f"No items containing the phrase \"{name}\" found in the rent database\n", false, true)
else
  rents:display_items(storage)
end</script>
				<command></command>
				<packageName></packageName>
				<regex>^rents show item (.+)$</regex>
			</Alias>
			<Alias isActive="yes" isFolder="no">
				<name>Rents show zone</name>
				<script>local name = matches[2]

local rents_db = db:get_database("rents")

local storage = db:fetch(rents_db.storage, db:like(rents_db.storage.zone, f"%{name}%"))

if table.is_empty(storage) then
  rents:echo(f"No items for zone \"{name}\" found in the rent database\n", false, true)
else
  rents:display_items(storage)
end</script>
				<command></command>
				<packageName></packageName>
				<regex>^rents show zone (.+)$</regex>
			</Alias>
			<Alias isActive="yes" isFolder="no">
				<name>Rents help</name>
				<script>cecho(rents.help)</script>
				<command></command>
				<packageName></packageName>
				<regex>^rents help$</regex>
			</Alias>
			<AliasGroup isActive="yes" isFolder="yes">
				<name>Deleting rent storage information</name>
				<script></script>
				<command></command>
				<packageName></packageName>
				<regex></regex>
				<Alias isActive="yes" isFolder="no">
					<name>Rents delete</name>
					<script>--deletes the ENTIRE rents database

local rents_db = db:get_database("rents")
db:delete(rents_db.storage, true)
rents:echo("The entire rents database has been deleted.\n")</script>
					<command></command>
					<packageName></packageName>
					<regex>^rents delete$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>Rents delete name</name>
					<script>local name = matches[2]

local rents_db = db:get_database("rents")

db:delete(rents_db.storage, db:like(rents_db.storage.name, name))
rents:echo("All items for character \""..name.."\" have been removed from the rent database.\n")</script>
					<command></command>
					<packageName></packageName>
					<regex>^rents delete name (.+)$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>Rents delete room</name>
					<script>local room = getPlayerRoom()

if matches[2] then
  room = tonumber(matches[2])
end

local rents_db = db:get_database("rents")

db:delete(rents_db.storage, db:eq(rents_db.storage.room, room))
rents:echo(f"All items for room \"{getRoomName(room)}\" have been removed from the rent database.\n")</script>
					<command></command>
					<packageName></packageName>
					<regex>^rents delete room( \d+)?$</regex>
				</Alias>
			</AliasGroup>
		</AliasGroup>
	</AliasPackage>
</MudletPackage>
