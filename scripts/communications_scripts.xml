<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE MudletPackage>
<MudletPackage version="1.001">
	<ScriptPackage>
		<ScriptGroup isActive="yes" isFolder="yes">
			<name>Communications</name>
			<packageName></packageName>
			<script></script>
			<eventHandlerList />
			<Script isActive="yes" isFolder="no">
				<name>communications initializations</name>
				<packageName></packageName>
				<script>communications = communications or {
    tabs = {"All", "Narrates", "Chats", "Tells", "Says", "Yells", "Misc"},
  }
communications.configs = communications.configs or {}
  
communications.defaults = {
  dbug = true,
  comms_window={
      border = "gray",
      background = "black",
      foreground = "white",
      tabs = "navy",
      visible=true,
      x="-37%",
      y="73%",
      w="37%",
      h="27%",
      fontsize=12,
      dock=false},
  colors = {narrates="royal_blue",
            chats="dark_green",
            tells="firebrick",
            says="reset",
            yells="gold",
            immortals="dodger_blue"}
}
</script>
				<eventHandlerList />
			</Script>
			<Script isActive="yes" isFolder="no">
				<name>communications:echo</name>
				<packageName></packageName>
				<script>function communications:echo(what, debug, err)
  --colored tags for message echo
  local main_tag = "&lt;dark_khaki&gt;(&lt;sienna&gt;communications&lt;dark_khaki&gt;): &lt;white&gt;"
  local debug_tag = "&lt;deep_sky_blue&gt;(&lt;royal_blue&gt;debug&lt;deep_sky_blue&gt;): &lt;white&gt;"
  local err_tag = "&lt;coral&gt;(&lt;red&gt;error&lt;coral&gt;): &lt;white&gt;"
  
  --if debug message and config debug is false, return without echoing  
  if debug and not self.configs.dbug then return end
  
  --if start of message is new line, print that before colored tags of message echo
  if what:sub(0,1)=="\n" then
    cecho("\n")
    what = what:sub(2)
  end
  cecho(main_tag)
  if debug then cecho(debug_tag) end
  if err then cecho(err_tag) end
  cecho(what)
end</script>
				<eventHandlerList />
			</Script>
			<Script isActive="yes" isFolder="no">
				<name>communications:set_configs</name>
				<packageName></packageName>
				<script>function communications:set_configs()
    local defaults = self.defaults or {}
    local configs = self.configs or {}
    -- load stored configs from file if it exists
    if io.exists(f"{getMudletHomeDir()}/communications.configs.lua") then
        self:echo("Loading communications configurations.\n", true)
        table.load(f"{getMudletHomeDir()}/communications.configs.lua",configs)
        self:echo("Communications configurations loaded.\n", true)
    end
    -- overwrite default values with stored config values
    configs = table.update(defaults, configs)
    self.configs = table.deepcopy(configs)
    table.save(f"{getMudletHomeDir()}/communications.configs.lua", self.configs)
end
</script>
				<eventHandlerList />
			</Script>
			<Script isActive="yes" isFolder="no">
				<name>communications:sys_connection</name>
				<packageName></packageName>
				<script>function communications:sys_connection(event)
  self:set_configs()
  self:show_comms(self.configs.comms_window.visible)
end

registerAnonymousEventHandler("sysLoadEvent", "communications:sys_connection")
registerAnonymousEventHandler("sysConnectionEvent", "communications:sys_connection")</script>
				<eventHandlerList />
			</Script>
			<Script isActive="yes" isFolder="no">
				<name>communications:sys_disconnection</name>
				<packageName></packageName>
				<script>function communications:sys_disconnection(event)
  self.configs = self.configs or {}
  
  self:echo("Saving communications configurations.\n", true)
  table.save(f"{getMudletHomeDir()}/communications.configs.lua", self.configs)
  self:echo("Communications configurations saved.\n", true)
end

registerAnonymousEventHandler("sysExitEvent", "communications:sys_disconnection")
registerAnonymousEventHandler("sysDisconnectionEvent", "communications:sys_disconnection")</script>
				<eventHandlerList />
			</Script>
			<Script isActive="yes" isFolder="no">
				<name>communications:show_comms</name>
				<packageName></packageName>
				<script>function communications:show_comms(bval)
  local visible = bval
  self.configs.comms_window.visible = visible
  local configs = self.configs.comms_window
  local x, y, w, h = configs.x, configs.y, configs.w, configs.h
  
  local r, g, b = unpack(color_table[configs.border])
  local rgb_str = f"{r},{g},{b}"
  
  self.container = self.container or
    Adjustable.Container:new(
      {
        name = "communications.container",
        adjLabelstyle = f"background-color:rgba({rgb_str},100%); border: 5px groove grey;",
        buttonstyle =
          [[
      QLabel{ border-radius: 7px; background-color: rgba(140,140,140,100%);}
      QLabel::hover{ background-color: rgba(160,160,160,50%);}
      ]],
        buttonFontSize = 10,
        buttonsize = 20,
        titleText = "Communications",
        titleTxtColor = "black",
        padding = 15,
      }
    )
  self.current_tab = self.current_tab or self.tabs[1]
  self.container:move(x, y)
  self.container:resize(w, h)
  
  self.header = self.header or 
    Geyser.HBox:new(
      {name = "communications.header", x = 0, y = 0, width = "100%", height = "10%"},
      self.container
    )
    
  self.footer = self.footer or 
    Geyser.Label:new(
      {name = "communications.footer", x = 0, y = "10%", width = "100%", height = "90%"},
      self.container
    )
    
  self.footer:setStyleSheet([[
  background-color: ]]..configs.background..[[;
  ]])

  for _, ctype in pairs(self.tabs) do
    self[f"{ctype}_tab"] = self[f"{ctype}_tab"] or 
      Geyser.Label:new({name = f"communications.{ctype}_tab"}, self.header)
    self[f"{ctype}_tab"]:setStyleSheet(
      [[
    background-color: ]] ..
      configs.tabs ..
      [[;
    border-top-left-radius: 10px;
    border-top-right-radius: 10px;
    margin-right: 1px;
    margin-left: 1px;
  ]]
    )
    self[f"{ctype}_tab"]:echo(f"&lt;center&gt;{ctype}", configs.foreground)
    self[f"{ctype}_tab"]:setClickCallback("communications.click", ctype)
    self[f"{ctype}_tab"]:setColor(configs.tabs)
    
    self[ctype] = self[ctype] or 
      Geyser.MiniConsole:new(
        {
          name = f"communications.{ctype}",
          x = "0%",
          y = "0%",
          width = "100%",
          height = "100%",
        },
        self.footer
      )
    enableScrollBar(f"communications.{ctype}")
    self[ctype]:enableAutoWrap()
    self[ctype]:setColor(configs.background)
    self[ctype]:setFontSize(configs.fontsize)
    self[ctype]:bg(configs.background)
    self[ctype]:fg(configs.foreground)
    self[ctype]:hide()
  end
  
  if visible then
    self.container:show()
    self[self.current_tab]:show()
  else
    self.container:hide()
  end
  
  x = tonumber(string.sub(x, 1, -2))
  y = tonumber(string.sub(y, 1, -2))
  w = tonumber(string.sub(w, 1, -2))
  h = tonumber(string.sub(h, 1, -2))
  
  if x &lt; 0 then
    x = x + 100
  end
  if y &lt; 0 then
    y = y + 100
  end
  
  --favor right docking &gt; left &gt; top
  if configs.dock then
    if x &gt; 100 - (w + 10) then
      self.container:attachToBorder("right")
    elseif x &lt; 10 then
      self.container:attachToBorder("left")
    elseif y &lt; h then
      self.container:attachToBorder("top")
    end
  else
    self.container:attachToBorder("float")
  end
end

function communications.click(tab)
  communications[communications.current_tab]:hide()
  communications.current_tab = tab
  communications[communications.current_tab]:show()
end</script>
				<eventHandlerList />
			</Script>
			<Script isActive="yes" isFolder="no">
				<name>communications:append</name>
				<packageName></packageName>
				<script>function communications:append(tab)
  selectCaptureGroup(1)
  copy()
  local time = getTime()
  local time_string = string.format("%02d:%02d ",time.hour,time.min)
  
  self.All:echo(time_string)
  self[tab]:echo(time_string)
  
  self.All:appendBuffer()
  self[tab]:appendBuffer()
end</script>
				<eventHandlerList />
			</Script>
			<Script isActive="yes" isFolder="no">
				<name>communications:show_help</name>
				<packageName></packageName>
				<script>function communications:show_help(cmd)
  if cmd then
    cmd = cmd:gsub(" ","_")
    if not self.help[cmd] then
      self:echo("No help file on that command.\n",false,true)
      return
    end
  else
    cmd = 1
  end
  for w in self.help[cmd]:gmatch("(.-)\n") do
    local before, target, text, after = w:match("(.*)&lt;link: (.*)&gt;(.*)&lt;/link&gt;(.*)")
    if target then
      cecho(before)
      fg("yellow")
      setUnderline(true)
      if target == "1" then
        echoLink(text, function() communications:show_help() end, "View: comms help", true)
      else
        echoLink(text, function() communications:show_help(target) end, f"View: comms help {target}", true)
      end
      setUnderline(false)
      resetFormat()
      if after then
        cecho(after)
      end
    else
      cecho(w)
    end
    cecho("\n")
  end
end

--definition of communications.help and sub-parts
communications.help =
  {
[[
    &lt;cyan&gt;Communications Script&lt;reset&gt;

    This script will capture narrates, chats, tells, says, yells, immortal speaking,
    and rat/raven reports, and store them in a tabbed chat window.
    
    You can copy/paste output from the window by selecting the text, right clicking,
    and copying (ctrl + C will NOT work).
    
    The roomnames in rat/raven reports are clickable and will search the map for
    possible matches.
    
    Below is a brief overview of commonly used commands that this script includes.
    Additional information for further areas is available as well, though every command
    may not be described here. All commands can be found in the appropriate communications
    folder under mudlet aliases.

    &lt;cyan&gt;Common Commands:&lt;reset&gt;
        &lt;link: 1&gt;comms help (optional subfolder name)&lt;/link&gt; - Shows either this help file or the help file for
            the subfolder given (e.g. comms help comms colors, comms help comms window, etc.)
        &lt;yellow&gt;comms dock&lt;reset&gt; - Make the communications window either dock to the left or right half of 
            the screen, or float
        &lt;yellow&gt;comms show&lt;reset&gt; - Displays or hides a communications window in a fixed position
        &lt;yellow&gt;comms debug&lt;reset&gt; - Toggles debug mode, in which extra messages are shown with the intent of
            assisting in troubleshooting. Default: on
        &lt;yellow&gt;comms configs reset&lt;reset&gt; - Reset the communications configuration values.
            
    &lt;cyan&gt;Information subfolders:&lt;reset&gt; These are sub-folders containing information for more commands
        &lt;link: comms_colors&gt;comms colors&lt;/link&gt; - Commands used in changing communications colors
        &lt;link: comms_window&gt;comms window&lt;/link&gt; - Altering the size and position of the communications display
        
]]
}

communications.help.comms_colors = 
[[
    &lt;cyan&gt;Communications Colors:&lt;reset&gt; These commands are used to change the colors of the communications lines
        &lt;yellow&gt;comms color type color&lt;reset&gt; - Chance the color of the given communications type to the
            provided color
            Example: comms color narrates green, comms color says white

]]

communications.help.comms_window =
[[
    &lt;cyan&gt;Communications Window&lt;reset&gt;
        &lt;yellow&gt;comms window setting value&lt;reset&gt; - This command changes the given setting to the given value,
            detailing how the communications window should appear. Possible settings are:
            &lt;yellow&gt;x&lt;reset&gt; - Specify the top left corner of the communications window as a
                percentage of the screen width. Default: -37
            &lt;yellow&gt;y&lt;reset&gt; - Specify the top left corner of the communications window as a
                percentage of the screen height. Default: 0
            &lt;yellow&gt;w&lt;reset&gt; - Specify the width of the communications window as a positive
                percentage of the screen width. Default: 37
            &lt;yellow&gt;h&lt;reset&gt; - Specify the height of the communications window as a positive
                percentage of the screen height. Default: 73
            &lt;yellow&gt;fontsize&lt;reset&gt; - Specify the font size of the communications window. 
                Default: 12
            &lt;yellow&gt;border&lt;reset&gt; - Specify the color of the border of the communications window. 
                Default: gray
            &lt;yellow&gt;background&lt;reset&gt; - Specify the color of the background of the communications tab windows. 
                Default: black
            &lt;yellow&gt;foreground&lt;reset&gt; - Specify the color of the foreground of the communications tab windows. 
                Default: white
            &lt;yellow&gt;tabs&lt;reset&gt; - Specify the color of the tabs of the communications windows. 
                Default: navy
        &lt;yellow&gt;comms dock&lt;reset&gt; - Make the communications window either dock to the left or right half of 
            the screen, or float
        &lt;yellow&gt;comms show&lt;reset&gt; - Displays or hides a communications window in a fixed position

]]</script>
				<eventHandlerList />
			</Script>
			<Script isActive="yes" isFolder="no">
				<name>communications:reposition_comms</name>
				<packageName></packageName>
				<script>function communications:reposition_comms(event, containerName, width, height, x, y)
  if containerName ~= "communications.container" then
    return
  end
  local mx, my = getMainWindowSize()
  x = x/mx*100
  y = y/my*100
  width = width/mx*100
  height = height/my*100
  
  self.configs.comms_window.x = f"{x}%"
  self.configs.comms_window.y = f"{y}%"
  self.configs.comms_window.w = f"{width}%"
  self.configs.comms_window.h = f"{height}%"
  table.save(f"{getMudletHomeDir()}/communications.configs.lua", self.configs)
  
  self:show_comms(true)
end

registerAnonymousEventHandler("AdjustableContainerRepositionFinish", "communications:reposition_comms")</script>
				<eventHandlerList />
			</Script>
			<Script isActive="yes" isFolder="no">
				<name>communications:comms_installer_success</name>
				<packageName></packageName>
				<script>function communications:comms_installer_success(event, name)
  --if installed file is not the desired one
  if name ~= "communications_scripts" then return end
  self:show_help()
  self:set_configs()
  self:show_comms(self.configs.comms_window.visible)
end

registerAnonymousEventHandler("sysInstallPackage", "communications:comms_installer_success")</script>
				<eventHandlerList />
			</Script>
		</ScriptGroup>
	</ScriptPackage>
</MudletPackage>
