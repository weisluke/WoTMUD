<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE MudletPackage>
<MudletPackage version="1.001">
	<AliasPackage>
		<AliasGroup isActive="yes" isFolder="yes">
			<name>Mapper</name>
			<script></script>
			<command></command>
			<packageName></packageName>
			<regex></regex>
			<AliasGroup isActive="yes" isFolder="yes">
				<name>Areas</name>
				<script></script>
				<command></command>
				<packageName></packageName>
				<regex></regex>
				<Alias isActive="yes" isFolder="no">
					<name>Create a New Area</name>
					<script>--syntax: createarea xxx

local areaID = addAreaName(matches[2])
if areaID then
  wotmudmapper:echo("New area (" .. matches[2] .. ") created.\n")
else
  wotmudmapper:echo("Area (" .. matches[2] .. ") already exists.\n",false,true)
end</script>
					<command></command>
					<packageName></packageName>
					<regex>^createarea (.+)$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>Create a Room at Areaname</name>
					<script>--syntax: createroom areaname

local areaID = addAreaName(matches[2])

if areaID and wotmudmapper.roomname~="" then
  wotmudmapper.currentID = wotmudmapper:create_room(0, 0, 0, areaID)
  wotmudmapper:echo("New room created.\n")
  centerview(wotmudmapper.currentID[1])
elseif wotmudmapper.roomname~="" then
  wotmudmapper.currentID = wotmudmapper:create_room(0, 0, 0, matches[2])
  wotmudmapper:echo("New room created.\n")
  centerview(wotmudmapper.currentID[1])
else
  wotmudmapper:echo("Current room name not known.\n",false,true)
end</script>
					<command></command>
					<packageName></packageName>
					<regex>^createroom (.+)$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>Move Room to Area</name>
					<script>--syntax: movetoarea xxx

local moved
if table.size(wotmudmapper.currentID) == 1 then
  for k, v in pairs(getAreaTable()) do
    if k == matches[2] then
      setRoomArea(wotmudmapper.currentID[1], v)
      wotmudmapper:echo("Room ("..wotmudmapper.currentID[1]..") moved to area (" .. k .. ").\n")
      moved = true
      centerview(wotmudmapper.currentID[1])
      break
    end
  end
else
  wotmudmapper:echo("Current room not known.\n",false,true)
end
if not moved then
  wotmudmapper:echo("Area ("..matches[2]..") not known.\n",false,true)
end</script>
					<command></command>
					<packageName></packageName>
					<regex>^movetoarea (.+)$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>Show Areas</name>
					<script>--syntax: arealist

wotmudmapper:show_area_list()</script>
					<command></command>
					<packageName></packageName>
					<regex>^arealist$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>Show Rooms in an Area</name>
					<script>local areaid = getAreaTable()[matches[2]]

if areaid then
  wotmudmapper:show_room_list(areaid)
else
  wotmudmapper:echo("Area ("..matches[2]..") not known.\n",false,true)
end</script>
					<command></command>
					<packageName></packageName>
					<regex>^roomlist (.+)$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>Rename Area</name>
					<script>--syntax: renamearea IDnumber newname
--IDnumber can be found from the "arealist" command
local renamed
for k, v in pairs(getAreaTable()) do
  if v == tonumber(matches[2]) then
    setAreaName(v, matches[3])
    wotmudmapper:echo(
      "Area (" .. k .. ") renamed to (" .. matches[3] .. ").\n"
    )
    renamed = true
    break
  end
end
if not renamed then
  wotmudmapper:echo("Area ("..matches[2]..") not known.\n", false, true)
end</script>
					<command></command>
					<packageName></packageName>
					<regex>^renamearea (\d+) (.+)$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>Delete an Area</name>
					<script>--syntax: deletearea xxx

local deleted
for k, v in pairs(getAreaTable()) do
  if k == matches[2] then
    if type(getMapLabels(v))=="table" then
      for kk,vv in pairs(getMapLabels(v)) do
        deleteMapLabel(v,kk)
      end
    end
    deleteArea(v)
    updateMap()
    wotmudmapper:echo("Area ("..matches[2]..") deleted. All its rooms, if any, have been deleted.\n")
    deleted = true
    break
  end
end
if not deleted then
  wotmudmapper:echo("Area ("..matches[2]..") not known.\n",false,true)
end</script>
					<command></command>
					<packageName></packageName>
					<regex>^deletearea (.+)$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>Delete room</name>
					<script>--syntax: deleteroom xxx

if roomExists(matches[2]) then
  deleteRoom(matches[2])
  updateMap()
  wotmudmapper:echo("Room ("..matches[2]..") deleted.\n")
else
  wotmudmapper:echo("Room ("..matches[2]..") not known.\n",false,true)
end</script>
					<command></command>
					<packageName></packageName>
					<regex>^deleteroom (\d+)$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>Update Room Name</name>
					<script>--syntax: updatederoomname roomIDnumber

setRoomName(matches[2],wotmudmapper.roomname)
wotmudmapper:echo("Room name updated.\n")</script>
					<command></command>
					<packageName></packageName>
					<regex>^updateroomname (\d+)$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>Update Room Description</name>
					<script>--syntax: updateroomdesc roomIDnumber

setRoomUserData(matches[2], "description", wotmudmapper.roomdesc)
wotmudmapper:echo("Room description updated.\n")</script>
					<command></command>
					<packageName></packageName>
					<regex>^updateroomdesc (\d+)$</regex>
				</Alias>
			</AliasGroup>
			<AliasGroup isActive="yes" isFolder="yes">
				<name>Room Data</name>
				<script></script>
				<command></command>
				<packageName></packageName>
				<regex></regex>
				<Alias isActive="yes" isFolder="no">
					<name>List Room Data</name>
					<script>--Syntax: listroomdata
--displays a list of all the data stored for your current room (this includes the description, zone, and doors)
if table.size(wotmudmapper.currentID) == 1 then
  for k, v in pairs(getRoomUserDataKeys(wotmudmapper.currentID[1])) do
    wotmudmapper:echo(
      "&lt;gold&gt;Key&lt;white&gt;: " ..
      v ..
      ", &lt;gold&gt;value&lt;white&gt;: " ..
      getRoomUserData(wotmudmapper.currentID[1], v) ..
      "&lt;reset&gt;\n"
    )
  end
else
  wotmudmapper:echo("Current room not known.\n",false,true)
end</script>
					<command></command>
					<packageName></packageName>
					<regex>^listroomdata$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>Set Room Data</name>
					<script>--Syntax: setroomdata field data
if table.size(wotmudmapper.currentID) == 1 then
  setRoomUserData(wotmudmapper.currentID[1], matches[2], matches[3])
  wotmudmapper:echo(
    "Room data for (" .. matches[2] .. ") set to (" .. matches[3] .. ").\n"
  )
else
  wotmudmapper:echo("Current room not known.\n",false,true)
end</script>
					<command></command>
					<packageName></packageName>
					<regex>^setroomdata (\S+) (.+)$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>Get Room Data</name>
					<script>--Syntax: getroomdata field
--Displays the data stored for a specific field
if table.size(wotmudmapper.currentID) == 1 then
  if getRoomUserData(wotmudmapper.currentID[1], matches[2]) ~= "" then
    wotmudmapper:echo(
      "Room data for (" ..
      matches[2] ..
      "): " ..
      getRoomUserData(wotmudmapper.currentID[1], matches[2]) ..
      ".\n"
    )
  else
    wotmudmapper:echo("No data for key (" .. matches[2] .. ") stored for room.\n", false, true)
  end
else
  wotmudmapper:echo("Current room not known.\n", false, true)
end</script>
					<command></command>
					<packageName></packageName>
					<regex>^getroomdata (\S+)$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>Delete Room Data</name>
					<script>--Syntax: deleteroomdata field
--Will delete the user data stored for a specific field in the current room
if table.size(wotmudmapper.currentID) == 1 then
  clearRoomUserDataItem(wotmudmapper.currentID[1], matches[2])
  wotmudmapper:echo("Room data for (" .. matches[2] .. ") deleted.\n")
else
  wotmudmapper:echo("Current room not known.\n",false,true)
end</script>
					<command></command>
					<packageName></packageName>
					<regex>^deleteroomdata (\S+)$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>Delete All Room Data</name>
					<script>--syntax: deleteallroomdata
--This will delete ALL user specific data about a room
--This includes clearing out the room description, zone, and doors
if table.size(wotmudmapper.currentID) == 1 then
  clearRoomUserData(wotmudmapper.currentID[1])
  wotmudmapper:echo("All room data deleted.\n")
else
  wotmudmapper:echo("Current room not known.\n",false,true)
end</script>
					<command></command>
					<packageName></packageName>
					<regex>^deleteallroomdata$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>Change Room Zone</name>
					<script>--syntax: crz zonename

if table.size(wotmudmapper.currentID) == 1 then
  setRoomUserData(wotmudmapper.currentID[1], "zone", matches[2])
  wotmudmapper.zone = matches[2]
  wotmudmapper:echo("Zone of current room set to (" .. matches[2] .. ")\n")
else
  wotmudmapper:echo("Current room not known.\n",false,true)
end</script>
					<command></command>
					<packageName></packageName>
					<regex>^crz (.*)$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>Change Mapping Zone</name>
					<script>--syntax: cmz zonename

wotmudmapper.zone=matches[2]
wotmudmapper:echo("New rooms will be of zone ("..matches[2]..").\n")</script>
					<command></command>
					<packageName></packageName>
					<regex>^cmz (.+)$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>Shift room</name>
					<script>--syntax: shiftroom direction
--shifts the current room in the direction
local direction = matches[2]
if table.size(wotmudmapper.currentID) == 1 then
  local x,y,z = getRoomCoordinates(wotmudmapper.currentID[1])
  x,y,z = wotmudmapper:set_coordinates_offset(x, y, z, direction)
  setRoomCoordinates(wotmudmapper.currentID[1], x, y, z)
  wotmudmapper:echo("Current room shifted ("..direction..").\n")
  centerview(wotmudmapper.currentID[1])
else
  wotmudmapper:echo("Current room not known.\n",false,true)
end</script>
					<command></command>
					<packageName></packageName>
					<regex>^shiftroom ([neswud])$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>Change zone color</name>
					<script>local color = matches[2]
if color_table[color] then
  wotmudmapper:echo(
    "Map (zonecolor) changed from (&lt;" ..
    wotmudmapper.configs.zonecolor ..
    "&gt;" ..
    wotmudmapper.configs.zonecolor ..
    "&lt;reset&gt;) to (&lt;" ..
    color ..
    "&gt;" ..
    color ..
    "&lt;reset&gt;).\n"
  )
  wotmudmapper.configs.zonecolor = color
  table.save(getMudletHomeDir() .. "/wotmudmapper.configs.lua", wotmudmapper.configs)
else
  wotmudmapper:echo("Color not known.\n", false, true)
end</script>
					<command></command>
					<packageName></packageName>
					<regex>^map zonecolor (.+)$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>Add Room Marker</name>
					<script>--syntax: setmarker xxx
--adds a one character marker to the room on the map. "setmarker " to clear the marker
--(if it's hard to tell, that means type in setmarker followed by one space to clear the room marker)
--ex: "setmarker #" will place a "#" symbol on the room in the map
if table.size(wotmudmapper.currentID) == 1 then
  setRoomChar(wotmudmapper.currentID[1], matches[2])
  wotmudmapper:echo("Marker ("..matches[2]..") added to current room.\n")
  updateMap()
else
  wotmudmapper:echo("Current room not known.\n",false,true)
end</script>
					<command></command>
					<packageName></packageName>
					<regex>^setmarker (.*)$</regex>
				</Alias>
			</AliasGroup>
			<AliasGroup isActive="yes" isFolder="yes">
				<name>Doors</name>
				<script></script>
				<command></command>
				<packageName></packageName>
				<regex></regex>
				<Alias isActive="yes" isFolder="no">
					<name>Creating Doors</name>
					<script>--Syntax: create (visible OR hidden OR locked) door direction doorname
local doortype = matches[2]
local direction = matches[3]
local doorname = matches[4]
local numtype = {visible=1,hidden=2,locked=3}
if table.size(wotmudmapper.currentID) == 1 then
  wotmudmapper:create_door(wotmudmapper.currentID[1], direction, numtype[doortype], doorname)
else
  wotmudmapper:echo("Current room not known.\n",false,true)
end</script>
					<command></command>
					<packageName></packageName>
					<regex>^create (visible|hidden|locked) door ([neswud]) (\S+)$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>Delete Door</name>
					<script>--Syntax: deletedoor direction
local direction = matches[2]
if table.size(wotmudmapper.currentID) == 1 then
  wotmudmapper:echo("Door ("..direction..") named ("..getRoomUserData(wotmudmapper.currentID[1],direction)..") deleted.\n")
  wotmudmapper:create_door(wotmudmapper.currentID[1], direction, 0, "")
  clearRoomUserDataItem(wotmudmapper.currentID[1], direction)
else
  wotmudmapper:echo("Current room not known.\n",false,true)
end</script>
					<command></command>
					<packageName></packageName>
					<regex>^deletedoor ([neswud])$</regex>
				</Alias>
				<AliasGroup isActive="yes" isFolder="yes">
					<name>Doors with directions</name>
					<script></script>
					<command></command>
					<packageName></packageName>
					<regex></regex>
					<Alias isActive="yes" isFolder="no">
						<name>Open Door</name>
						<script>--syntax: odn/ods/ode/odw/odu/odd

wotmudmapper:door_com_dir("open", matches[2])</script>
						<command></command>
						<packageName></packageName>
						<regex>^od([neswud])$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>Close Door</name>
						<script>--syntax: cdn/cde/cds/cdw/cdu/cdd

wotmudmapper:door_com_dir("close", matches[2])</script>
						<command></command>
						<packageName></packageName>
						<regex>^cd([neswud])$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>Pick Door</name>
						<script>--syntax: pdn/pde/pds/pdw/pdu/pdd

wotmudmapper:door_com_dir("pick", matches[2])</script>
						<command></command>
						<packageName></packageName>
						<regex>^pd([neswud])$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>Knock Door</name>
						<script>--syntax: kdn/kde/kds/kdw/kdu/kdd

wotmudmapper:door_com_dir("knock", matches[2])</script>
						<command></command>
						<packageName></packageName>
						<regex>^kd([neswud])$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>Unlock Door</name>
						<script>--syntax: udn/ude/uds/udw/udu/udd

wotmudmapper:door_com_dir("unlock", matches[2])</script>
						<command></command>
						<packageName></packageName>
						<regex>^ud([neswud])$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>Lock Door</name>
						<script>--syntax: ldn/lde/lds/ldw/ldu/ldd

wotmudmapper:door_com_dir("lock", matches[2])</script>
						<command></command>
						<packageName></packageName>
						<regex>^ld([neswud])$</regex>
					</Alias>
				</AliasGroup>
				<Alias isActive="yes" isFolder="no">
					<name>Change door color</name>
					<script>local color = matches[2]
if color_table[color] then
  wotmudmapper:echo(
    "Map (doorcolor) changed from (&lt;" ..
    wotmudmapper.configs.doorcolor ..
    "&gt;" ..
    wotmudmapper.configs.doorcolor ..
    "&lt;reset&gt;) to (&lt;" ..
    color ..
    "&gt;" ..
    color ..
    "&lt;reset&gt;).\n"
  )
  wotmudmapper.configs.doorcolor = color
  table.save(getMudletHomeDir() .. "/wotmudmapper.configs.lua", wotmudmapper.configs)
else
  wotmudmapper:echo("Color not known.\n", false, true)
end</script>
					<command></command>
					<packageName></packageName>
					<regex>^map doorcolor (.+)$</regex>
				</Alias>
			</AliasGroup>
			<AliasGroup isActive="yes" isFolder="yes">
				<name>Coloring Rooms</name>
				<script></script>
				<command></command>
				<packageName></packageName>
				<regex></regex>
				<Alias isActive="yes" isFolder="no">
					<name>Color Legend</name>
					<script>--syntax: map legend

cecho("&lt;light_goldenrod&gt;Map Legend\n")
for k, v in pairs(wotmudmapper.map_colors) do
  cecho("   &lt;"..v.."&gt;" .. k .. "&lt;reset&gt;\n")
end</script>
					<command></command>
					<packageName></packageName>
					<regex>^map legend$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>Change Room Color</name>
					<script>--syntax: cre environment
--set current room to a particular environment type

local env = string.lower(matches[2])

if table.size(wotmudmapper.currentID) == 1 then
  if wotmudmapper.map_colors[env] then
    setRoomEnv(wotmudmapper.currentID[1], wotmudmapper.room_type_env_nums[env])
    wotmudmapper:echo("Type of current room changed to &lt;"..wotmudmapper.map_colors[env].."&gt;"..env.."&lt;reset&gt;.\n")
    updateMap()
  else
    wotmudmapper:echo("Type of room ("..env..") not known.\n",false,true)
  end
else
  wotmudmapper:echo("Current room not known.\n",false,true)
end</script>
					<command></command>
					<packageName></packageName>
					<regex>^cre (.+)$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>Change Mapping Environment</name>
					<script>--syntax: cme environment
--make the rooms you're mapping all of a particular environment type

local env = string.lower(matches[2])

if wotmudmapper.map_colors[env] then
  wotmudmapper.configs.envcolor = wotmudmapper.room_type_env_nums[env]
  wotmudmapper:echo("New rooms will be of type &lt;"..wotmudmapper.map_colors[env].."&gt;"..env.."&lt;reset&gt;.\n")
  table.save(getMudletHomeDir() .. "/wotmudmapper.configs.lua", wotmudmapper.configs)
else
  wotmudmapper:echo("Type of room ("..matches[2]..") not known.\n",false,true)
end</script>
					<command></command>
					<packageName></packageName>
					<regex>^cme (.+)$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>Reset Map Colors</name>
					<script>--syntax: map colors reset

wotmudmapper.map_colors = table.deepcopy(wotmudmapper.default_map_colors)
wotmudmapper:echo("Map colors reset to default values.\n")
table.save(getMudletHomeDir() .. "/wotmudmapper.map_colors.lua", wotmudmapper.map_colors)
wotmudmapper:set_map_colors()</script>
					<command></command>
					<packageName></packageName>
					<regex>^map colors reset$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>Change Map Colors</name>
					<script>local env = string.lower(matches[2])
local color = matches[3]

if wotmudmapper.map_colors[env] ~= nil then
  if color_table[color] then
    wotmudmapper:echo(
      "Map color for (" ..
      env ..
      ") changed from (&lt;" ..
      wotmudmapper.map_colors[env] ..
      "&gt;" ..
      wotmudmapper.map_colors[env] ..
      "&lt;reset&gt;) to (&lt;" ..
      color ..
      "&gt;" ..
      color ..
      "&lt;reset&gt;).\n"
    )
    wotmudmapper.map_colors[env] = color
    table.save(getMudletHomeDir() .. "/wotmudmapper.map_colors.lua", wotmudmapper.map_colors)
    wotmudmapper:set_map_colors()
  else
    wotmudmapper:echo("Color not known.\n", false, true)
  end
else
  wotmudmapper:echo("Mapper window key (" .. env .. ") not known.\n", false, true)
end</script>
					<command></command>
					<packageName></packageName>
					<regex>^map color (\S+) (\S+)$</regex>
				</Alias>
			</AliasGroup>
			<AliasGroup isActive="yes" isFolder="yes">
				<name>Map Labels</name>
				<script></script>
				<command></command>
				<packageName></packageName>
				<regex></regex>
				<Alias isActive="yes" isFolder="no">
					<name>Add Line Horizontal</name>
					<script>--syntax example: hline nw 3e

local place = matches[2]
local num = tonumber(matches[3])
local dir = matches[4]
local offsets = {nw = {-1.5, 1.5}, ne = {1.5, 1.5}, sw = {-1.5, -1.5}, se = {1.5, -1.5}}
if table.size(wotmudmapper.currentID) == 1 and offsets[place] then
  local areaID = getRoomArea(wotmudmapper.currentID[1])
  local pos1, pos2, pos3 = getRoomCoordinates(wotmudmapper.currentID[1])
  local x = offsets[place][1]
  local y = offsets[place][2]
  x = pos1 + x
  y = pos2 + y
  x = x - 0.75
  y = y + 0.15
  if dir == "w" then
    x = x - 3 * num
  end
  local directory = getMudletHomeDir().."/map image labels/horizontalmarker" .. num .. ".png"
  createMapImageLabel(areaID, directory, x, y, pos3, 1.5 + 3 * num, 0.3, 100, false)
else
  wotmudmapper:echo("Current room not known, or invalid location/direction specification.\n",false,true)
end</script>
					<command></command>
					<packageName></packageName>
					<regex>^hline (\S+) (\d+)([ew])$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>Add Line Vertical</name>
					<script>--syntax example: vline nw 3s

local place = matches[2]
local num = tonumber(matches[3])
local dir = matches[4]
local offsets = {nw = {-1.5, 1.5}, ne = {1.5, 1.5}, sw = {-1.5, -1.5}, se = {1.5, -1.5}}
if table.size(wotmudmapper.currentID) == 1 and offsets[place] then
  local areaID = getRoomArea(wotmudmapper.currentID[1])
  local pos1, pos2, pos3 = getRoomCoordinates(wotmudmapper.currentID[1])
  local x = offsets[place][1]
  local y = offsets[place][2]
  x = pos1 + x
  y = pos2 + y
  x = x - 0.15
  y = y + 0.75
  if dir == "n" then
    y = y + 3 * num
  end
  local directory = getMudletHomeDir().."/map image labels/verticalmarker" .. num .. ".png"
  createMapImageLabel(areaID, directory, x, y, pos3, 0.3, 1.5 + 3 * num, 100, false)
else
  wotmudmapper:echo("Current room not known, or invalid location/direction specification.\n",false,true)
end</script>
					<command></command>
					<packageName></packageName>
					<regex>^vline (\S+) (\d+)([ns])$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>Make Text Label</name>
					<script>--syntax: makelabel gray nw xxx
--createMapLabel(areaID, text, posx, posy, posz, fgRed, fgGreen, fgBlue, bgRed, bgGreen, bgBlue, zoom, fontSize, showOnTop, noScaling)
local color = matches[2]
local place = matches[3]
local labeltext = matches[4]
local r, g, b
local fontsize = 30

local offsets = {n={-0.5,2.5},s={-0.5,-0.5},e={1.0,1.0},nw = {-2.5, 2.5}, ne = {0.5, 2.5}, sw = {-2.5, -0.5}, se = {0.5, -0.5}}

if table.size(wotmudmapper.currentID) == 1 and offsets[place] and color_table[color] then
  r, g, b = unpack(color_table[color])
  local areaID = getRoomArea(wotmudmapper.currentID[1])
  local pos1, pos2, pos3 = getRoomCoordinates(wotmudmapper.currentID[1])
  local x = offsets[place][1]
  local y = offsets[place][2]
  x = pos1 + x
  y = pos2 + y
  createMapLabel(areaID, labeltext, x, y, pos3, r, g, b, 50, 50, 50, 30, fontsize, false, false)
else
  wotmudmapper:echo("Current room not known, or invalid color/location/text specification.\n",false,true)
end</script>
					<command></command>
					<packageName></packageName>
					<regex>^makelabel (\S+) (\S+) (.+)$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>Show Possible Colors</name>
					<script>--openUrl("https://wiki.mudlet.org/images/c/c3/ShowColors.png")
showColors()</script>
					<command></command>
					<packageName></packageName>
					<regex>^viewcolors$</regex>
				</Alias>
			</AliasGroup>
			<AliasGroup isActive="yes" isFolder="yes">
				<name>Mapper Booleans</name>
				<script></script>
				<command></command>
				<packageName></packageName>
				<regex></regex>
				<Alias isActive="yes" isFolder="no">
					<name>Mapping On/Off</name>
					<script>--syntax: mapping

wotmudmapper.configs.mapping = not wotmudmapper.configs.mapping
wotmudmapper:echo("Mapping is: " .. (wotmudmapper.configs.mapping and "&lt;green&gt;on&lt;reset&gt;.\n" or "&lt;red&gt;off&lt;reset&gt;.\n"))
table.save(getMudletHomeDir() .. "/wotmudmapper.configs.lua", wotmudmapper.configs)</script>
					<command></command>
					<packageName></packageName>
					<regex>^mapping$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>Bothways</name>
					<script>--syntax: map bothways
--toggle whether rooms are connected in both directions when mapping (i.e. use one way exits or no)

wotmudmapper.configs.bothways = not wotmudmapper.configs.bothways
wotmudmapper:echo("Bothways set to: " .. (wotmudmapper.configs.bothways and "&lt;green&gt;on&lt;reset&gt;.\n" or "&lt;red&gt;off&lt;reset&gt;.\n"))
table.save(getMudletHomeDir() .. "/wotmudmapper.configs.lua", wotmudmapper.configs)</script>
					<command></command>
					<packageName></packageName>
					<regex>^map bothways$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>Autojoin</name>
					<script>--syntax: map autojoin
--toggle whether rooms should autojoin to nearby rooms when mapping

wotmudmapper.configs.autojoin = not wotmudmapper.configs.autojoin
wotmudmapper:echo("Autojoin set to: " .. (wotmudmapper.configs.autojoin and "&lt;green&gt;on&lt;reset&gt;.\n" or "&lt;red&gt;off&lt;reset&gt;.\n"))
table.save(getMudletHomeDir() .. "/wotmudmapper.configs.lua", wotmudmapper.configs)</script>
					<command></command>
					<packageName></packageName>
					<regex>^map autojoin$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>Make Brief</name>
					<script>--syntax: map brief

wotmudmapper.configs.mapbrief = not wotmudmapper.configs.mapbrief
wotmudmapper:echo("Mapper will now " .. (wotmudmapper.configs.mapbrief and "hide" or "show").." room descriptions.\n")
table.save(getMudletHomeDir() .. "/wotmudmapper.configs.lua", wotmudmapper.configs)</script>
					<command></command>
					<packageName></packageName>
					<regex>^map brief$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>Force New Room</name>
					<script>--syntax: forceroom
--Will force the next room created to be a new room

wotmudmapper.configs.forceroom = true
wotmudmapper:echo("Forcing new room.\n")
table.save(getMudletHomeDir() .. "/wotmudmapper.configs.lua", wotmudmapper.configs)</script>
					<command></command>
					<packageName></packageName>
					<regex>^forceroom$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>Debug</name>
					<script>--syntax: map debug

wotmudmapper.configs.dbug = not wotmudmapper.configs.dbug
wotmudmapper:echo("Map debug set to: " .. (wotmudmapper.configs.dbug and "&lt;green&gt;on&lt;reset&gt;.\n" or "&lt;red&gt;off&lt;reset&gt;.\n"))
table.save(getMudletHomeDir() .. "/wotmudmapper.configs.lua", wotmudmapper.configs)</script>
					<command></command>
					<packageName></packageName>
					<regex>^map debug$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>Display or hide zone name</name>
					<script>wotmudmapper.configs.showzone = not wotmudmapper.configs.showzone

wotmudmapper:echo("Mapper will now "..(wotmudmapper.configs.showzone and "show" or "hide").." zone names.\n")
table.save(getMudletHomeDir() .. "/wotmudmapper.configs.lua", wotmudmapper.configs)</script>
					<command></command>
					<packageName></packageName>
					<regex>^map showzone$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>Map Offline</name>
					<script>--syntax: map offline
--toggle whether you can move map in offline mode

wotmudmapper.configs.offline = not wotmudmapper.configs.offline
wotmudmapper:echo("Offline set to: " .. (wotmudmapper.configs.offline and "&lt;green&gt;on&lt;reset&gt;.\n" or "&lt;red&gt;off&lt;reset&gt;.\n"))
table.save(getMudletHomeDir() .. "/wotmudmapper.configs.lua", wotmudmapper.configs)

if wotmudmapper.configs.offline then
    enableKey("Offline Map")
    enableAlias("Offline Map Dirs")
    enableAlias("Offline Map Look")
else
    disableKey("Offline Map")
    disableAlias("Offline Map Dirs")
    disableAlias("Offline Map Look")
end</script>
					<command></command>
					<packageName></packageName>
					<regex>^map offline$</regex>
					<Alias isActive="no" isFolder="no">
						<name>Offline Map Dirs</name>
						<script>wotmudmapper:offline_move(matches[2])</script>
						<command></command>
						<packageName></packageName>
						<regex>^([neswud])$</regex>
					</Alias>
					<Alias isActive="no" isFolder="no">
						<name>Offline Map Look</name>
						<script>wotmudmapper:offline_move("l")</script>
						<command></command>
						<packageName></packageName>
						<regex>^l$</regex>
					</Alias>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>Map widget</name>
					<script>wotmudmapper.configs.map_window.widget = not wotmudmapper.configs.map_window.widget

wotmudmapper:echo("Mapper will now "..(wotmudmapper.configs.map_window.widget and "use" or "not use").." the map widget.\n")
table.save(getMudletHomeDir() .. "/wotmudmapper.configs.lua", wotmudmapper.configs)</script>
					<command></command>
					<packageName></packageName>
					<regex>^map widget$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>Map speedwalk</name>
					<script>--syntax: map speedwalk
--toggle whether you should be able to speedwalk by double clicking on rooms

wotmudmapper.configs.speedwalk = not wotmudmapper.configs.speedwalk
wotmudmapper:echo("Speedwalk set to: " .. (wotmudmapper.configs.speedwalk and "&lt;green&gt;on&lt;reset&gt;.\n" or "&lt;red&gt;off&lt;reset&gt;.\n"))
table.save(getMudletHomeDir() .. "/wotmudmapper.configs.lua", wotmudmapper.configs)</script>
					<command></command>
					<packageName></packageName>
					<regex>^map speedwalk$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>Map on/off</name>
					<script>--syntax: map on OR map off
--toggle whether the mapper should follow you

wotmudmapper.configs.on = not wotmudmapper.configs.on
wotmudmapper:echo("The mapper " .. (wotmudmapper.configs.on and "&lt;green&gt;will&lt;reset&gt;" or "&lt;red&gt;will not&lt;reset&gt;").." follow you.\n")
table.save(getMudletHomeDir() .. "/wotmudmapper.configs.lua", wotmudmapper.configs)

if wotmudmapper.configs.on then
  enableTrigger("Mapper")
  enableAlias("Doors with directions")
  wotmudmapper.queue = List:new()
else
  disableTrigger("Mapper")
  disableAlias("Doors with directions")
end</script>
					<command></command>
					<packageName></packageName>
					<regex>(^map on$)|(^map off$)</regex>
				</Alias>
			</AliasGroup>
			<Alias isActive="yes" isFolder="no">
				<name>Speedwalk Alias</name>
				<script>local com = matches[1]

comlist = com:gmatch("%d*[neswud]")

for v in comlist do
  local num = v:split("[neswud]")[1]
  local dir = v:split(num)[2] or v:split(num)[1]
  
  if num == "" then
    num = 1
  end
  
  for i=1,tonumber(num),1 do
    send(dir,false)
  end
end</script>
				<command></command>
				<packageName></packageName>
				<regex>^\.(\d*[neswud])+$</regex>
			</Alias>
			<Alias isActive="yes" isFolder="no">
				<name>Reset Queue</name>
				<script>--syntax: resetqueue

local numcoms = wotmudmapper.queue.last - wotmudmapper.queue.first + 1
display(wotmudmapper.queue)
wotmudmapper.queue = List:new()
wotmudmapper:echo("Queue reset. "..numcoms.." command(s) was/were removed.\n")</script>
				<command></command>
				<packageName></packageName>
				<regex>^resetqueue$</regex>
			</Alias>
			<Alias isActive="yes" isFolder="no">
				<name>Find Room</name>
				<script>--syntax: findroom roomname zone zonename OR findroom roomname

local roomname, zonename

if matches[5] then
  roomname = matches[6]
else
  roomname = matches[3]
end

local foundrooms = searchRoom(roomname, false, true)
if table.is_empty(foundrooms) then
  foundrooms = searchRoom(roomname, false, false)
end
if not matches[5] then
  zonename = matches[4]
  for k, v in pairs(foundrooms) do
    if not string.find(string.lower(getRoomUserData(k, "zone")), string.lower(zonename)) then
      foundrooms[k] = nil
    end
  end
end

if table.is_empty(foundrooms) then
  wotmudmapper:echo("No matches found.\n", false, true)
elseif table.size(foundrooms) == 1 then
  wotmudmapper:echo("One matching room found. Map has been centered on this room.\n")
  for k, v in pairs(foundrooms) do
    centerview(k)
  end
else
  wotmudmapper:echo("Multiple matches found.\n", false, true)
  for k, v in spairs(foundrooms) do
    cechoLink(
      "Room ID: " ..
      k ..
      ", &lt;ansi_cyan&gt;room name&lt;reset&gt;: " ..
      getRoomName(k) ..
      ", &lt;" ..
      wotmudmapper.configs.zonecolor ..
      "&gt;zone&lt;reset&gt;: " ..
      getRoomUserData(k, "zone") ..
      "\n",
      [[centerview(]] .. k .. [[)]],
      "Click to center map on room.",
      true
    )
  end
  cecho("")
end</script>
				<command></command>
				<packageName></packageName>
				<regex>(^findroom (.+) zone (.+)$)|(^findroom (.+)$)</regex>
			</Alias>
			<Alias isActive="yes" isFolder="no">
				<name>Find Door</name>
				<script>--syntax: finddoor doorname zone zonename OR finddoor doorname

local doorname, zonename

if matches[5] then
  doorname = matches[6]
else
  doorname = matches[3]
end

local foundrooms = {}

for room, name in pairs(getRooms()) do
  for _, dir in pairs({"n","e","s","w","u","d"}) do
    if string.lower(getRoomUserData(room, dir)) == string.lower(doorname) then
      table.insert(foundrooms,room)
    end
  end
end

--remove duplicates
foundrooms = table.n_union(foundrooms, foundrooms)

if not matches[5] then
  zonename = matches[4]
  for k, v in pairs(foundrooms) do
    if not string.find(string.lower(getRoomUserData(v, "zone")), string.lower(zonename)) then
      foundrooms[k] = nil
    end
  end
end

if table.is_empty(foundrooms) then
  wotmudmapper:echo("No matches found.\n", false, true)
elseif table.size(foundrooms) == 1 then
  wotmudmapper:echo("One matching room found. Map has been centered on this room.\n")
  for k, v in pairs(foundrooms) do
    centerview(v)
  end
else
  wotmudmapper:echo("Multiple matches found.\n", false, true)
  for k, v in spairs(foundrooms) do
    cechoLink(
      "Room ID: " ..
      v ..
      ", &lt;ansi_cyan&gt;room name&lt;reset&gt;: " ..
      getRoomName(v) ..
      ", &lt;" ..
      wotmudmapper.configs.zonecolor ..
      "&gt;zone&lt;reset&gt;: " ..
      getRoomUserData(v, "zone") ..
      "\n",
      [[centerview(]] .. v .. [[)]],
      "Click to center map on room.",
      true
    )
  end
  cecho("")
end</script>
				<command></command>
				<packageName></packageName>
				<regex>(^finddoor (.+) zone (.+)$)|(^finddoor (.+)$)</regex>
			</Alias>
			<Alias isActive="yes" isFolder="no">
				<name>Update Map</name>
				<script>--syntax: map update

wotmudmapper:echo("Downloading updated map...\n")
local url="https://raw.githubusercontent.com/weisluke/WoTMUD/master/WoTMUD_map.dat"
local saveto = getMudletHomeDir() .. "/WoTMUD_map.dat"
downloadFile(saveto, url)</script>
				<command></command>
				<packageName></packageName>
				<regex>^map update$</regex>
			</Alias>
			<Alias isActive="yes" isFolder="no">
				<name>Show Queue</name>
				<script>wotmudmapper:echo("Showing queue.\n")
display(wotmudmapper.queue)</script>
				<command></command>
				<packageName></packageName>
				<regex>^showqueue$</regex>
			</Alias>
			<Alias isActive="yes" isFolder="no">
				<name>Save Map</name>
				<script>local dir=getMudletHomeDir() .. "/WoTMUD_map.dat"
wotmudmapper:echo("Saving map to "..dir.."\n")
local res = saveMap(dir)
if res then
  wotmudmapper:echo("Map saved.\n")
else
  wotmudmapper:echo("Map failed to save.\n",false,true)
end</script>
				<command></command>
				<packageName></packageName>
				<regex>^map save$</regex>
			</Alias>
			<Alias isActive="yes" isFolder="no">
				<name>Save Map JSON</name>
				<script>local dir=getMudletHomeDir() .. "/WoTMUD_map.json"
wotmudmapper:echo("Saving map to "..dir.."\n")
local res = saveJsonMap(dir)
if res then
  wotmudmapper:echo("Map saved.\n")
else
  wotmudmapper:echo("Map failed to save.\n",false,true)
end</script>
				<command></command>
				<packageName></packageName>
				<regex>^map save json$</regex>
			</Alias>
			<Alias isActive="yes" isFolder="no">
				<name>Map Window Config Alias</name>
				<script>local key = matches[2]
local val = matches[3]
if wotmudmapper.configs.map_window[key]~=nil then
  if key == "w" then
    if (not tonumber(val)) or (tonumber(val) &lt; 1) then
      wotmudmapper:echo("Width must be a positive number (interpreted as a percentage of screen width).\n",false,true)
    else
      val = val.."%"
      wotmudmapper.configs.map_window[key] = val
      wotmudmapper:echo("Map window ("..key..") updated to ("..val..").\n")
      table.save(getMudletHomeDir() .. "/wotmudmapper.configs.lua", wotmudmapper.configs)
      wotmudmapper:show_map(true)
    end
  elseif key == "h" then
    if (not tonumber(val)) or (tonumber(val) &lt; 1) then
      wotmudmapper:echo("Height must be a positive number (interpreted as a percentage of screen height).\n",false,true)
    else
      val = val.."%"
      wotmudmapper.configs.map_window[key] = val
      wotmudmapper:echo("Map window ("..key..") updated to ("..val..").\n")
      table.save(getMudletHomeDir() .. "/wotmudmapper.configs.lua", wotmudmapper.configs)
      wotmudmapper:show_map(true)
    end
  elseif key == "x" then
    if not tonumber(val) then
      wotmudmapper:echo("X position must be a number (interpreted as a percentage of screen width).\n",false,true)
    else
      val = val.."%"
      wotmudmapper.configs.map_window[key] = val
      wotmudmapper:echo("Map window ("..key..") updated to ("..val..").\n")
      table.save(getMudletHomeDir() .. "/wotmudmapper.configs.lua", wotmudmapper.configs)
      wotmudmapper:show_map(true)
    end
  elseif key == "y" then
    if not tonumber(val) then
      wotmudmapper:echo("Y position must be a number (interpreted as a percentage of screen height).\n",false,true)
    else
      val = val.."%"
      wotmudmapper.configs.map_window[key] = val
      wotmudmapper:echo("Map window ("..key..") updated to ("..val..").\n")
      table.save(getMudletHomeDir() .. "/wotmudmapper.configs.lua", wotmudmapper.configs)
      wotmudmapper:show_map(true)
    end
  elseif key == "border" then
    if not color_table[val] then
      wotmudmapper:echo("Color ("..val..") not known. Type \"viewcolors\" to see the list of available colors.\n", false, true)
    else
      wotmudmapper:echo("Map window ("..key..") updated from (&lt;"..
        wotmudmapper.configs.map_window.border..
        "&gt;"..wotmudmapper.configs.map_window.border..
        "&lt;reset&gt;) to (&lt;"..val.."&gt;"..val.."&lt;reset&gt;).\n")
      wotmudmapper.configs.map_window[key] = val
      table.save(getMudletHomeDir() .. "/wotmudmapper.configs.lua", wotmudmapper.configs)
      wotmudmapper:echo("Color change will only take effect upon restarting mudlet.\n")
    end
  else
    wotmudmapper:echo("Key ("..key..") unable to be changed through this alias.\n",false,true)
  end
else
  wotmudmapper:echo("Map window key (" .. key .. ") not known.\n", false, true)
end</script>
				<command></command>
				<packageName></packageName>
				<regex>^map window (\S+) (\S+)$</regex>
			</Alias>
			<Alias isActive="yes" isFolder="no">
				<name>Map Zoom</name>
				<script>local val = matches[2]
if (not tonumber(val)) or (tonumber(val) &lt; 1) then
  wotmudmapper:echo("Zoom must be a positive number (closer to 1 = more zoomed in).\n", false, true)
else
  val = tonumber(val)
  wotmudmapper.configs.map_window.zoom = val
  wotmudmapper:echo("Map window (zoom) updated to (" .. val .. ").\n")
  table.save(getMudletHomeDir() .. "/wotmudmapper.configs.lua", wotmudmapper.configs)
  for name, id in pairs(getAreaTable()) do
    setMapZoom(val, id)
  end
end</script>
				<command></command>
				<packageName></packageName>
				<regex>^map zoom (\S+)$</regex>
			</Alias>
			<Alias isActive="yes" isFolder="no">
				<name>Dock/Undock Map</name>
				<script>wotmudmapper.configs.map_window.dock = not wotmudmapper.configs.map_window.dock
wotmudmapper:echo("Map will now be "..(wotmudmapper.configs.map_window.dock and "docked.\n" or "floating.\n")) 
table.save(getMudletHomeDir() .. "/wotmudmapper.configs.lua", wotmudmapper.configs)
wotmudmapper:show_map(wotmudmapper.configs.map_window.visible)</script>
				<command></command>
				<packageName></packageName>
				<regex>^map dock$</regex>
			</Alias>
			<Alias isActive="yes" isFolder="no">
				<name>Show/Hide Map</name>
				<script>wotmudmapper.configs.map_window.visible = not wotmudmapper.configs.map_window.visible
wotmudmapper:echo("Map will now be "..(wotmudmapper.configs.map_window.visible and "shown.\n" or "hidden.\n"))
table.save(getMudletHomeDir() .. "/wotmudmapper.configs.lua", wotmudmapper.configs)
wotmudmapper:show_map(wotmudmapper.configs.map_window.visible)</script>
				<command></command>
				<packageName></packageName>
				<regex>^map show$</regex>
			</Alias>
			<Alias isActive="yes" isFolder="no">
				<name>Map Help Alias</name>
				<script>wotmudmapper:show_help(matches[3])</script>
				<command></command>
				<packageName></packageName>
				<regex>^map help( (.*))?$</regex>
			</Alias>
			<Alias isActive="yes" isFolder="no">
				<name>Reset Configs</name>
				<script>wotmudmapper.configs = table.deepcopy(wotmudmapper.defaults)
wotmudmapper.configs.dbug = false
wotmudmapper:echo("Map configurations reset to default values.\n")
wotmudmapper:show_map(true)</script>
				<command></command>
				<packageName></packageName>
				<regex>^map configs reset$</regex>
			</Alias>
			<Alias isActive="yes" isFolder="no">
				<name>Search room descriptions</name>
				<script>--syntax: search room descs xxx

local phrase = matches[2]
local foundrooms = {}

for id, name in pairs(getRooms()) do
  local desc = getRoomUserData(id, "description")
  if string.find(desc, phrase) then
    table.insert(foundrooms, id)
  end
end

if table.is_empty(foundrooms) then
  wotmudmapper:echo("No matches found.\n", false, true)
elseif table.size(foundrooms) == 1 then
  wotmudmapper:echo("One matching room found. Map has been centered on this room.\n")
  for k, v in pairs(foundrooms) do
    centerview(v)
  end
else
  wotmudmapper:echo("Multiple matches found.\n", false, true)
  for k, v in pairs(foundrooms) do
    cechoLink(
      "Room ID: " ..
      v ..
      ", &lt;ansi_cyan&gt;room name&lt;reset&gt;: " ..
      getRoomName(v) ..
      ", ",
      [[wotmudmapper:echo("Displaying room description for room ID (]]..v..[[)\n") 
        echo(getRoomUserData(]]..v..[[, "description").."\n")]],
      "Click to display room description.",
      true
    )
    cechoLink(
      "&lt;" ..
      wotmudmapper.configs.zonecolor ..
      "&gt;zone&lt;reset&gt;: " ..
      getRoomUserData(v, "zone") ..
      "\n",
      [[centerview(]] .. v .. [[)]],
      "Click to center map on room.",
      true
    )
  end
end</script>
				<command></command>
				<packageName></packageName>
				<regex>^search room descs (.+)$</regex>
			</Alias>
		</AliasGroup>
	</AliasPackage>
</MudletPackage>
