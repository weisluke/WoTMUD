<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE MudletPackage>
<MudletPackage version="1.001">
	<TriggerPackage>
		<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
			<name>Mapper</name>
			<script></script>
			<triggerType>0</triggerType>
			<conditonLineDelta>0</conditonLineDelta>
			<mStayOpen>0</mStayOpen>
			<mCommand></mCommand>
			<packageName></packageName>
			<mFgColor>#ff0000</mFgColor>
			<mBgColor>#ffff00</mBgColor>
			<mSoundFile></mSoundFile>
			<colorTriggerFgColor>#000000</colorTriggerFgColor>
			<colorTriggerBgColor>#000000</colorTriggerBgColor>
			<regexCodeList />
			<regexCodePropertyList />
			<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="yes" isSoundTrigger="no" isColorTrigger="yes" isColorTriggerFg="no" isColorTriggerBg="no">
				<name>Catch Name</name>
				<script>--check that the line is not immortal communications (the only other possibility for a whole line being cyan)
if
  (line == matches[1] or string.find(line, " &gt; "..matches[1], 1, true)) and
  not (
    string.find(line, "speaks from the") or
    string.find(line, "prays") or 
    string.find(line, "answers your prayer") or 
    string.find(line, "shouts &lt;")
  )
then
  wotmudmapper.roomname = matches[1]
  --if on an immortal, remove room flags
  if string.match(wotmudmapper.roomname, "(.+) %(#%d+%)") ~= nil then
    wotmudmapper.roomname = string.match(wotmudmapper.roomname, "(.+) %(#%d+%)")
  end
  --edge case where the mud spits out room names with spaces at the start
  if string.match(wotmudmapper.roomname, "^%s+(.+)") ~= nil then
    wotmudmapper.roomname = string.match(wotmudmapper.roomname, "^%s+(.+)")
  end
  wotmudmapper:echo("\nRoom name (" .. wotmudmapper.roomname .. ") captured.", true)
  
  wotmudmapper.roomdesc = nil
  wotmudmapper.brief = true
  
  enableTrigger("Map Description")
end</script>
				<triggerType>0</triggerType>
				<conditonLineDelta>0</conditonLineDelta>
				<mStayOpen>1</mStayOpen>
				<mCommand></mCommand>
				<packageName></packageName>
				<mFgColor>#ff0000</mFgColor>
				<mBgColor>#ffff00</mBgColor>
				<mSoundFile></mSoundFile>
				<colorTriggerFgColor>#008080</colorTriggerFgColor>
				<colorTriggerBgColor>#000000</colorTriggerBgColor>
				<regexCodeList>
					<string>FG14BG-2</string>
				</regexCodeList>
				<regexCodePropertyList>
					<integer>6</integer>
				</regexCodePropertyList>
				<TriggerGroup isActive="no" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Map Description</name>
					<script>--if line is not the roomname and not the exit line, add to room description
if
  string.match(matches[2], wotmudmapper.roomname.." %(#%d+%)") == nil and
  string.match(matches[2], "^%s+"..wotmudmapper.roomname.."$") == nil and
  matches[2] ~= wotmudmapper.roomname and
  not string.find(line, "obvious exits:")
then
  wotmudmapper.brief = false
  if wotmudmapper.roomdesc == nil then
    wotmudmapper.roomdesc = line
  else
    wotmudmapper.roomdesc = wotmudmapper.roomdesc .. "\n" .. line
  end
  
  if
    wotmudmapper.configs.mapbrief and not wotmudmapper:is_look(wotmudmapper.queue:checkleftvalue())
  then
    deleteLine()
  end
  
  setTriggerStayOpen("Catch Name", 1)
end</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>^(.*)$</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
					</regexCodePropertyList>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="yes" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Get Exits</name>
						<script>disableTrigger("Map Description")

--puts current exits in a table of the form {"n","e","s","w","u","d"}
wotmudmapper.roomexits = string.lower(matches[2])
wotmudmapper:echo("\nRoom exits (" .. wotmudmapper.roomexits .. ") captured.\n", true)
wotmudmapper.roomexits = string.split(wotmudmapper.roomexits)
wotmudmapper.roomexits = table.n_intersection(wotmudmapper.roomexits, {"n","e","s","w","u","d"})
  
if wotmudmapper:is_dark_name() then
  wotmudmapper.roomname = nil
end
if wotmudmapper:is_dark_desc() then
  wotmudmapper.roomdesc = nil
end

--get the last direction used (or flee, if fleeing or following)
local com = wotmudmapper:get_direction()

--loading the previous roomID.
local lastID = wotmudmapper.currentID
local newID = {}

--if you are mapping, were in a unique room, and command is a movement
if wotmudmapper.configs.mapping 
  and table.size(lastID) == 1 
  and wotmudmapper:is_movement(com) 
then
  local tempID = wotmudmapper:find_matching_room()
  --if not in an already mapped room or if forcing a room
  if table.is_empty(tempID) or wotmudmapper.configs.forceroom then
    local x, y, z = getRoomCoordinates(lastID[1])
    x, y, z = wotmudmapper:set_coordinates_offset(x, y, z, com)
    wotmudmapper.currentID = wotmudmapper:create_room(x, y, z, getRoomArea(lastID[1]))
    wotmudmapper:link_rooms(lastID[1], wotmudmapper.currentID[1], com, wotmudmapper.roomexits)
    if wotmudmapper.configs.autojoin then
      wotmudmapper:auto_join_rooms(wotmudmapper.currentID[1])
    end
    wotmudmapper.configs.forceroom = false
    --if in a known room, link with previous room
  elseif table.size(tempID) == 1 and tempID[1] ~= lastID[1] then
    wotmudmapper.currentID = tempID
    wotmudmapper:link_rooms(lastID[1], wotmudmapper.currentID[1], com, wotmudmapper.roomexits)
    --else, you're just moving around in mapping mode
  else
    if wotmudmapper:is_waygate(lastID[1]) and com == "d" then
      local waygates = wotmudmapper:get_waygates(lastID[1])
      table.insert(newID, wotmudmapper:find_matching_room(waygates))
    end
    table.insert(newID, wotmudmapper:nearby_rooms(lastID[1], com))
    --flatten any lists that were inserted
    newID = table.n_flatten(newID)
    --and remove duplicate room IDs
    wotmudmapper.currentID = table.n_union(newID, newID)
    --one last check that rooms can't be narrowed down any further
    wotmudmapper.currentID = wotmudmapper:find_matching_room(wotmudmapper.currentID)
    if table.is_empty(wotmudmapper.currentID) then
      wotmudmapper.currentID = wotmudmapper:find_matching_room()
    end
  end
--not mapping from a unique room
elseif wotmudmapper:is_movement(com) or wotmudmapper:is_flee(com) then
  for _, id in pairs(lastID) do
    if wotmudmapper:is_waygate(id) and (com == "d" or com == "f") then
      local waygates = wotmudmapper:get_waygates(id)
      table.insert(newID, wotmudmapper:find_matching_room(waygates))
    end
    table.insert(newID, wotmudmapper:nearby_rooms(id, com))
  end
  --flatten any lists that were inserted
  newID = table.n_flatten(newID)
  --and remove duplicate room IDs
  wotmudmapper.currentID = table.n_union(newID, newID)
  --one last check that rooms can't be narrowed down any further
  wotmudmapper.currentID = wotmudmapper:find_matching_room(wotmudmapper.currentID)
  if table.is_empty(wotmudmapper.currentID) then
    wotmudmapper.currentID = wotmudmapper:find_matching_room()
  end
--if not looking at room and data is same, search for room
elseif
  not (
    wotmudmapper:is_look(com) and
    table.size(lastID) == 1 and
    (wotmudmapper.roomname == nil or wotmudmapper.roomname == getRoomName(lastID[1])) and
    (wotmudmapper.roomdesc == nil or wotmudmapper.roomdesc == getRoomUserData(lastID[1], "description"))
  )
then
  wotmudmapper.currentID = wotmudmapper:find_matching_room()
end

if table.is_empty(wotmudmapper.currentID) then
  wotmudmapper:echo("\nNo matches found.",false,true)
elseif table.size(wotmudmapper.currentID) &gt; 1 then
  wotmudmapper:echo("\nMultiple matches found.",false,true)
else
  centerview(wotmudmapper.currentID[1])
  wotmudmapper:show_zone_door_info()
end</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>transparent</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^\[ obvious exits:(.*)\]$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
				</TriggerGroup>
			</TriggerGroup>
			<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
				<name>Night/Blind/Fog Movement</name>
				<script>--if already handling a room we know is dark from the name
if wotmudmapper:is_dark_name() then
  return
end

wotmudmapper.roomname = nil
wotmudmapper.roomdesc = nil
wotmudmapper.roomexits = nil

--get the last direction used (or flee, if fleeing or following)
local com = wotmudmapper:get_direction()

--loading the previous roomID
local lastID = wotmudmapper.currentID
local newID = {}

if wotmudmapper:is_movement(com) or wotmudmapper:is_flee(com) then
  --for every current room
  for _, id in pairs(lastID) do
    --if 1) room is a waygate and 2) we are going down or fleeing
    if wotmudmapper:is_waygate(id) and (com == "d" or com == "f") then
      --insert all the waygates
      table.insert(newID, wotmudmapper:get_waygates(id))
    end
    --insert all nearby rooms as well
    table.insert(newID, wotmudmapper:nearby_rooms(id, com))
  end
  --flatten any lists that were inserted
  newID = table.n_flatten(newID)
  --and remove duplicate room IDs
  wotmudmapper.currentID = table.n_union(newID, newID)
  --one last check that rooms can't be narrowed down any further
  wotmudmapper.currentID = wotmudmapper:find_matching_room(wotmudmapper.currentID)
  if table.is_empty(wotmudmapper.currentID) then
    wotmudmapper.currentID = wotmudmapper:find_matching_room()
  end
--if not looking at known room, search for room from all rooms in the map
elseif not (wotmudmapper:is_look(com) and table.size(lastID) == 1) then
  wotmudmapper.currentID = wotmudmapper:get_rooms()
end

if table.is_empty(wotmudmapper.currentID) then
  wotmudmapper:echo("\nNo matches found.",false,true)
elseif table.size(wotmudmapper.currentID) &gt; 1 then
  wotmudmapper:echo("\nMultiple matches found.",false,true)
else
  centerview(wotmudmapper.currentID[1])
  wotmudmapper:show_zone_door_info()
end</script>
				<triggerType>0</triggerType>
				<conditonLineDelta>0</conditonLineDelta>
				<mStayOpen>0</mStayOpen>
				<mCommand></mCommand>
				<packageName></packageName>
				<mFgColor>#ff0000</mFgColor>
				<mBgColor>#ffff00</mBgColor>
				<mSoundFile></mSoundFile>
				<colorTriggerFgColor>#000000</colorTriggerFgColor>
				<colorTriggerBgColor>#000000</colorTriggerBgColor>
				<regexCodeList>
					<string>It is pitch black\.\.\.$</string>
					<string>You can't see a damned thing in this thick fog!$</string>
					<string>You can't see a damned thing, you're blinded!$</string>
				</regexCodeList>
				<regexCodePropertyList>
					<integer>1</integer>
					<integer>1</integer>
					<integer>1</integer>
				</regexCodePropertyList>
			</Trigger>
			<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
				<name>Hurricane/Fireworks movement</name>
				<script>wotmudmapper.currentID={}

for id, name in pairs(getRooms()) do
  if getRoomUserData(id, "zone") == wotmudmapper.zone then
    table.insert(wotmudmapper.currentID, id)
  end
end</script>
				<triggerType>0</triggerType>
				<conditonLineDelta>0</conditonLineDelta>
				<mStayOpen>0</mStayOpen>
				<mCommand></mCommand>
				<packageName></packageName>
				<mFgColor>#ff0000</mFgColor>
				<mBgColor>#ffff00</mBgColor>
				<mSoundFile></mSoundFile>
				<colorTriggerFgColor>#000000</colorTriggerFgColor>
				<colorTriggerBgColor>#000000</colorTriggerBgColor>
				<regexCodeList>
					<string>A hurricane force wind lifts you off the ground!$</string>
					<string>\*KERBOOM\* The explosion rips you from the ground and tosses you through the air\.$</string>
				</regexCodeList>
				<regexCodePropertyList>
					<integer>1</integer>
					<integer>1</integer>
				</regexCodePropertyList>
			</Trigger>
			<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="yes" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
				<name>Movement Failure</name>
				<script>local com = wotmudmapper.queue:popleft()
if wotmudmapper.following then
  wotmudmapper.following = false
end

if table.size(wotmudmapper.currentID) &gt; 1 then
--reduce possible roommatches based on fact that a direction doesn't work
  if matches[1] == "Alas, you cannot go that way..." then
  
    local roommatches = {}
    for _, id in pairs(wotmudmapper.currentID) do
      --initialiasing table
      local map_exits = {}
      --create table of exit keys (grabbing first letter of "north","south",etc.)
      for dir, _ in pairs(getRoomExits(id)) do
        table.insert(map_exits, string.sub(dir, 1, 1))
      end
      --if there are exit stubs leading to unmapped room, include those
      if getExitStubs(id) then
        for _, dirnum in pairs(getExitStubs(id)) do
          table.insert(map_exits, string.sub(wotmudmapper.exitmap[dirnum], 1, 1))
        end
      end
      --compare list of possible exits to exit that failed
      --if possible exits doesn't contain direction that failed OR has a door (which could be hidden, and closed)
      --then that room is a possible match
      if (not table.contains(map_exits, com)) or getRoomUserData(id, com) ~= "" then
        table.insert(roommatches, id)
      end
    end
    wotmudmapper.currentID = roommatches
    
  --reduce possible room matches based on fact that a direction led to water
  elseif matches[1] == "You need a boat to go there." 
    or matches[1] == "You would need to swim there, you can't just walk it."
    or matches[1] == "You can't ride on water."
    or matches[1] == "You shudder at the concept of crossing water." then
    
    local roommatches = {}
    for _, id in pairs(wotmudmapper.currentID) do
      --what room would the movement take us to
      local to_room = getRoomExits(id)[wotmudmapper.exitmap[wotmudmapper.exitmap[com]]]
      --if it exists and is a water room, then it is a possible match
      if to_room and getRoomEnv(to_room) == wotmudmapper.room_type_env_nums["water"] then
        table.insert(roommatches, id)
      end
      
      --if there are exit stubs in the direction leading to unmapped rooms, include the current room
      if getExitStubs(id) then
        for _, dirnum in pairs(getExitStubs(id)) do
          if string.sub(wotmudmapper.exitmap[dirnum], 1, 1) == com then
            table.insert(roommatches, id)
          end
        end
      end
    end
    wotmudmapper.currentID = roommatches
     
  end
end
if table.size(wotmudmapper.currentID) == 1 then
  centerview(wotmudmapper.currentID[1])
end</script>
				<triggerType>0</triggerType>
				<conditonLineDelta>0</conditonLineDelta>
				<mStayOpen>0</mStayOpen>
				<mCommand></mCommand>
				<packageName></packageName>
				<mFgColor>#ffaa00</mFgColor>
				<mBgColor>transparent</mBgColor>
				<mSoundFile></mSoundFile>
				<colorTriggerFgColor>#000000</colorTriggerFgColor>
				<colorTriggerBgColor>#000000</colorTriggerBgColor>
				<regexCodeList>
					<string>(.+) blocks the path of (.+)\.$</string>
					<string>(.+) blocks your path\.$</string>
					<string>A (.+) blocks the way\.$</string>
					<string>A massive blast of air buffets you, knocking you off balance\.$</string>
					<string>Alas, you cannot go that way\.\.\.$</string>
					<string>All you can do right now is think about the stars!$</string>
					<string>An (.+) blocks the way\.$</string>
					<string>An elite Queen's Guard blocks the way and says 'You are not allowed there, (.+)\.'$</string>
					<string>Are you crazy\? You can't just walk out of a second story window!$</string>
					<string>Berserk! Death! Death! Fight to the death!$</string>
					<string>In your dreams, or what\?$</string>
					<string>Maybe you should get on your feet first\?$</string>
					<string>Nah\.\.\. You feel too relaxed to do that\.\.$</string>
					<string>No way!  You're fighting for your life!$</string>
					<string>The Eye of the World is no longer the place for you, (.+)\.$</string>
					<string>The ground gives way, and you are sent hurtling down the embankment!$</string>
					<string>You are too exhausted\.$</string>
					<string>You can't leave the Circle for (.+), since you were pkilled!$</string>
					<string>You can't leave the Circle yet for (.+) since you were pkilled!$</string>
					<string>You can't ride in there\.$</string>
					<string>You can't ride on water\.$</string>
					<string>You can't ride there on a horse!$</string>
					<string>You don't see anything to start swimming in\.$</string>
					<string>You need a boat to go there\.$</string>
					<string>You try, but the mind-numbing cold prevents you\.\.$</string>
					<string>You shudder at the concept of crossing water\.$</string>
					<string>You would need to climb there from here\.$</string>
					<string>You would need to swim there, you can't just walk it\.$</string>
					<string>Your mount is engaged in combat!$</string>
					<string>Your mount is too exhausted\.$</string>
					<string>Your mount ought to be awake and standing first!$</string>
					<string>Your mount refuses to obey your command\.$</string>
					<string>You'll have to take your chances and JUMP OUT!$</string>
					<string>You're in pretty bad shape, unable to do anything!$</string>
				</regexCodeList>
				<regexCodePropertyList>
					<integer>1</integer>
					<integer>1</integer>
					<integer>1</integer>
					<integer>1</integer>
					<integer>1</integer>
					<integer>1</integer>
					<integer>1</integer>
					<integer>1</integer>
					<integer>1</integer>
					<integer>1</integer>
					<integer>1</integer>
					<integer>1</integer>
					<integer>1</integer>
					<integer>1</integer>
					<integer>1</integer>
					<integer>1</integer>
					<integer>1</integer>
					<integer>1</integer>
					<integer>1</integer>
					<integer>1</integer>
					<integer>1</integer>
					<integer>1</integer>
					<integer>1</integer>
					<integer>1</integer>
					<integer>1</integer>
					<integer>1</integer>
					<integer>1</integer>
					<integer>1</integer>
					<integer>1</integer>
					<integer>1</integer>
					<integer>1</integer>
					<integer>1</integer>
					<integer>1</integer>
					<integer>1</integer>
				</regexCodePropertyList>
			</Trigger>
			<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
				<name>Doors in General</name>
				<script>local com = wotmudmapper.queue:popleft()
local direction
if com == wotmudmapper.door and com then
  direction = wotmudmapper.door
elseif com then
  direction = com
else
  direction = wotmudmapper.door
end
if
  wotmudmapper.configs.mapping and
  table.size(wotmudmapper.currentID) == 1 and
  getRoomUserData(wotmudmapper.currentID[1], direction) == ""
then
  cecho("\n")
  wotmudmapper:create_door(wotmudmapper.currentID[1], direction, 1, matches[2])
end
if wotmudmapper.following then
  wotmudmapper.following = false
end
--if door was closed, use it to narrow down possible roommatches
if
  table.contains(
    {
      "The " .. matches[2] .. " is closed.",
      "The " .. matches[2] .. " seems to be closed.",
      "&gt; The " .. matches[2] .. " is closed.",
      "&gt; The " .. matches[2] .. " seems to be closed.",
    },
    matches[1]
  )
  --but only try to narrow down results if room isn't already known
  and table.size(wotmudmapper.currentID) &gt; 1
then
  local roommatches = {}
  for _, id in pairs(wotmudmapper.currentID) do
    --if room has door in direction entered, add to potential matches
    if getRoomUserData(id, com) ~= "" then
      table.insert(roommatches, id)
    end
  end
  wotmudmapper.currentID = roommatches
end
if table.size(wotmudmapper.currentID) == 1 then
  centerview(wotmudmapper.currentID[1])
end</script>
				<triggerType>0</triggerType>
				<conditonLineDelta>0</conditonLineDelta>
				<mStayOpen>0</mStayOpen>
				<mCommand></mCommand>
				<packageName></packageName>
				<mFgColor>#ff0000</mFgColor>
				<mBgColor>#ffff00</mBgColor>
				<mSoundFile></mSoundFile>
				<colorTriggerFgColor>#000000</colorTriggerFgColor>
				<colorTriggerBgColor>#000000</colorTriggerBgColor>
				<regexCodeList>
					<string>^The (.+) is open\.$</string>
					<string>^The (.+) is obviously open\.$</string>
					<string>^The (.+) is closed\.$</string>
					<string>^The (.+) seems to be closed\.$</string>
					<string>&gt; The (.+) is closed\.$</string>
					<string>&gt; The (.+) seems to be closed\.$</string>
					<string>&gt; The (.+) is open\.$</string>
					<string>&gt; The (.+) is obviously open\.$</string>
				</regexCodeList>
				<regexCodePropertyList>
					<integer>1</integer>
					<integer>1</integer>
					<integer>1</integer>
					<integer>1</integer>
					<integer>1</integer>
					<integer>1</integer>
					<integer>1</integer>
					<integer>1</integer>
				</regexCodePropertyList>
			</Trigger>
			<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
				<name>Hidden Doors</name>
				<script>if wotmudmapper.configs.mapping and table.size(wotmudmapper.currentID) == 1 then
  cecho("\n")
  wotmudmapper:create_door(wotmudmapper.currentID[1], wotmudmapper.door, 2, matches[2])
end</script>
				<triggerType>0</triggerType>
				<conditonLineDelta>0</conditonLineDelta>
				<mStayOpen>0</mStayOpen>
				<mCommand></mCommand>
				<packageName></packageName>
				<mFgColor>#ff0000</mFgColor>
				<mBgColor>#ffff00</mBgColor>
				<mSoundFile></mSoundFile>
				<colorTriggerFgColor>#000000</colorTriggerFgColor>
				<colorTriggerBgColor>#000000</colorTriggerBgColor>
				<regexCodeList>
					<string>You skillfully discover a hidden (.+)\.$</string>
				</regexCodeList>
				<regexCodePropertyList>
					<integer>1</integer>
				</regexCodePropertyList>
			</Trigger>
			<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
				<name>Resetting Queue</name>
				<script>wotmudmapper.queue = List:new()</script>
				<triggerType>0</triggerType>
				<conditonLineDelta>0</conditonLineDelta>
				<mStayOpen>0</mStayOpen>
				<mCommand></mCommand>
				<packageName></packageName>
				<mFgColor>#ff0000</mFgColor>
				<mBgColor>#ffff00</mBgColor>
				<mSoundFile></mSoundFile>
				<colorTriggerFgColor>#000000</colorTriggerFgColor>
				<colorTriggerBgColor>#000000</colorTriggerBgColor>
				<regexCodeList>
					<string>You are helped out of the coach by the driver\.$</string>
				</regexCodeList>
				<regexCodePropertyList>
					<integer>1</integer>
				</regexCodePropertyList>
			</Trigger>
			<Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
				<name>Resuming Trigger</name>
				<script>wotmudmapper.queue = List:new()
disableTrigger("Resuming Trigger")</script>
				<triggerType>0</triggerType>
				<conditonLineDelta>0</conditonLineDelta>
				<mStayOpen>0</mStayOpen>
				<mCommand></mCommand>
				<packageName></packageName>
				<mFgColor>#ff0000</mFgColor>
				<mBgColor>#ffff00</mBgColor>
				<mSoundFile></mSoundFile>
				<colorTriggerFgColor>#000000</colorTriggerFgColor>
				<colorTriggerBgColor>#000000</colorTriggerBgColor>
				<regexCodeList>
					<string>^(o|\*)?((^| )(R|S|F))?( I(\d+))?( R:(\d+))?( S:(\S+))?( HP:(\S+))?( SP:(\S+))?( DP:(\S+))?( MV:(\S+))?(^| )(&gt;|- .+ &gt;)</string>
				</regexCodeList>
				<regexCodePropertyList>
					<integer>1</integer>
				</regexCodePropertyList>
			</Trigger>
			<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
				<name>Pausing Trigger</name>
				<script>enableTrigger("Resuming Trigger")</script>
				<triggerType>0</triggerType>
				<conditonLineDelta>0</conditonLineDelta>
				<mStayOpen>0</mStayOpen>
				<mCommand></mCommand>
				<packageName></packageName>
				<mFgColor>#ff0000</mFgColor>
				<mBgColor>#ffff00</mBgColor>
				<mSoundFile></mSoundFile>
				<colorTriggerFgColor>#000000</colorTriggerFgColor>
				<colorTriggerBgColor>#000000</colorTriggerBgColor>
				<regexCodeList>
					<string>\* Press &lt;Return&gt; to continue, q to quit \*&gt;$</string>
				</regexCodeList>
				<regexCodePropertyList>
					<integer>1</integer>
				</regexCodePropertyList>
			</Trigger>
			<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="yes" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
				<name>Failing Flees</name>
				<script>if wotmudmapper:is_flee(wotmudmapper.queue:checkleftvalue()) then
  wotmudmapper.queue:popleft()
end</script>
				<triggerType>0</triggerType>
				<conditonLineDelta>0</conditonLineDelta>
				<mStayOpen>0</mStayOpen>
				<mCommand></mCommand>
				<packageName></packageName>
				<mFgColor>#ff0000</mFgColor>
				<mBgColor>transparent</mBgColor>
				<mSoundFile></mSoundFile>
				<colorTriggerFgColor>#000000</colorTriggerFgColor>
				<colorTriggerBgColor>#000000</colorTriggerBgColor>
				<regexCodeList>
					<string>PANIC!  You couldn't escape!$</string>
					<string>PANIC!  Fear paralyzes you!$</string>
				</regexCodeList>
				<regexCodePropertyList>
					<integer>1</integer>
					<integer>1</integer>
				</regexCodePropertyList>
			</Trigger>
			<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="yes" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
				<name>Fleeing</name>
				<script>wotmudmapper.flee = true</script>
				<triggerType>0</triggerType>
				<conditonLineDelta>0</conditonLineDelta>
				<mStayOpen>0</mStayOpen>
				<mCommand></mCommand>
				<packageName></packageName>
				<mFgColor>#ff007f</mFgColor>
				<mBgColor>transparent</mBgColor>
				<mSoundFile></mSoundFile>
				<colorTriggerFgColor>#000000</colorTriggerFgColor>
				<colorTriggerBgColor>#000000</colorTriggerBgColor>
				<regexCodeList>
					<string>You flee head over heels\.$</string>
				</regexCodeList>
				<regexCodePropertyList>
					<integer>1</integer>
				</regexCodePropertyList>
			</Trigger>
			<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="yes" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
				<name>Following</name>
				<script>wotmudmapper.following = true</script>
				<triggerType>0</triggerType>
				<conditonLineDelta>0</conditonLineDelta>
				<mStayOpen>0</mStayOpen>
				<mCommand></mCommand>
				<packageName></packageName>
				<mFgColor>#aaff00</mFgColor>
				<mBgColor>transparent</mBgColor>
				<mSoundFile></mSoundFile>
				<colorTriggerFgColor>#000000</colorTriggerFgColor>
				<colorTriggerBgColor>#000000</colorTriggerBgColor>
				<regexCodeList>
					<string>You follow (.+)\.$</string>
				</regexCodeList>
				<regexCodePropertyList>
					<integer>1</integer>
				</regexCodePropertyList>
			</Trigger>
			<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
				<name>"Where" clickable center room</name>
				<script>local roomname = matches[2]
local foundrooms = searchRoom(roomname, true, true)
local roomID

for k, v in pairs(foundrooms) do
  if getRoomUserData(k, "zone") ~= wotmudmapper.zone then
    foundrooms[k] = nil
  end
end

if table.is_empty(foundrooms) then
  selectCaptureGroup(2)
  setLink(function() end, "No matches found!")
elseif table.size(foundrooms) == 1 then
  for k, v in pairs(foundrooms) do
    selectCaptureGroup(2)
    setLink(function() centerview(k) end, "Click to center map on room.")
  end
else
  selectCaptureGroup(2)
  setLink(function() 
    for k,v in spairs(foundrooms) do
      echoLink("Room ID: " .. k .. "\n", function() centerview(k) end, "Click to center map on room.",true)
    end 
  end, "Click to display rooms with matching name.")
end
</script>
				<triggerType>0</triggerType>
				<conditonLineDelta>0</conditonLineDelta>
				<mStayOpen>0</mStayOpen>
				<mCommand></mCommand>
				<packageName></packageName>
				<mFgColor>#ff0000</mFgColor>
				<mBgColor>#ffff00</mBgColor>
				<mSoundFile></mSoundFile>
				<colorTriggerFgColor>#000000</colorTriggerFgColor>
				<colorTriggerBgColor>#000000</colorTriggerBgColor>
				<regexCodeList>
					<string>^\S+\s* \- ([A-Z].+)$</string>
				</regexCodeList>
				<regexCodePropertyList>
					<integer>1</integer>
				</regexCodePropertyList>
			</Trigger>
			<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
				<name>Reset queue on successful login/connection</name>
				<script>--mostly relevant for people creating new characters, since some of
--the character selection options will add commands to the queue
--e.g., selecting (s)eanchan at the start for a new character

wotmudmapper.queue = List:new()</script>
				<triggerType>0</triggerType>
				<conditonLineDelta>0</conditonLineDelta>
				<mStayOpen>0</mStayOpen>
				<mCommand></mCommand>
				<packageName></packageName>
				<mFgColor>#ff0000</mFgColor>
				<mBgColor>#ffff00</mBgColor>
				<mSoundFile></mSoundFile>
				<colorTriggerFgColor>#000000</colorTriggerFgColor>
				<colorTriggerBgColor>#000000</colorTriggerBgColor>
				<regexCodeList>
					<string>^              ------:- http://www.wotmud.org -:--------$</string>
				</regexCodeList>
				<regexCodePropertyList>
					<integer>1</integer>
				</regexCodePropertyList>
			</Trigger>
		</TriggerGroup>
	</TriggerPackage>
</MudletPackage>
