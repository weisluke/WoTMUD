<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE MudletPackage>
<MudletPackage version="1.001">
	<ScriptPackage>
		<ScriptGroup isActive="yes" isFolder="yes">
			<name>Equipment Database</name>
			<packageName></packageName>
			<script></script>
			<eventHandlerList />
			<Script isActive="yes" isFolder="no">
				<name>equip_db initializations</name>
				<packageName></packageName>
				<script>equip_db = equip_db or {configs = {}, eq_info = {}}

</script>
				<eventHandlerList />
			</Script>
			<Script isActive="yes" isFolder="no">
				<name>equip_db:echo</name>
				<packageName></packageName>
				<script>function equip_db:echo(what, debug, err)
  --colored tags for message echo
  local main_tag = "&lt;gray&gt;(&lt;white&gt;equip_db&lt;gray&gt;): &lt;white&gt;"
  local debug_tag = "&lt;deep_sky_blue&gt;(&lt;royal_blue&gt;debug&lt;deep_sky_blue&gt;): &lt;white&gt;"
  local err_tag = "&lt;coral&gt;(&lt;red&gt;error&lt;coral&gt;): &lt;white&gt;"
  
  --if debug message and config debug is false, return without echoing
  if debug and not self.configs.dbug then return end
  
  --if start of message is new line, print that before colored tags of message echo
  if what:sub(0,1)=="\n" then
    cecho("\n")
    what = what:sub(2)
  end
  cecho(main_tag)
  if debug then cecho(debug_tag) end
  if err then cecho(err_tag) end
  cecho(what)
end</script>
				<eventHandlerList />
			</Script>
			<Script isActive="yes" isFolder="no">
				<name>equip_db:create_db</name>
				<packageName></packageName>
				<script>equip_db.eq_fields = {
    weapons = {"name", "hands", "weapon_type", "ob", "pb", "dmg", "weight", "dmg_type"},
    armor = {"name", "eq_slot", "db", "pb", "mvs", "abs", "weight", "setup"},
    trinkets = {"name", "eq_slot", "db", "pb", "mvs", "weight", "setup"}
  }
  
function equip_db:create_db()
  db:create(
    "equipment",
    {
      weapons =
        {
          name = "",
          hands = 0,
          weapon_type = "",
          ob = 0,
          pb = 0,
          dmg = "",
          weight = 0,
          dmg_type = "",
        },
      armor =
        {
          name = "",
          eq_slot = "",
          db = 0,
          pb = 0,
          mvs = 0,
          abs = 0,
          weight = 0,
          setup = ""
        },
      trinkets =
        {
          name = "",
          eq_slot = "",
          db = 0,
          pb = 0,
          mvs = 0,
          weight = 0,
          setup = ""
        },
    }
  )
  
end

equip_db:create_db()
</script>
				<eventHandlerList />
			</Script>
			<Script isActive="yes" isFolder="no">
				<name>equip_db:show_help</name>
				<packageName></packageName>
				<script>function equip_db:show_help()
  local help =
  [[
    &lt;cyan&gt;Equipment Database Script&lt;reset&gt;

    This script will capture and store equipment stats in a database located at
    at ]] .. getMudletHomeDir() .. [[/Database_equipment.db
    
    Below is a brief overview of some commands that this script includes.
    All commands can be found in the appropriate equipment database folder
    under mudlet aliases.

    &lt;cyan&gt;Commands:&lt;reset&gt;
        &lt;yellow&gt;edb help&lt;reset&gt; - Show this help message.
        &lt;yellow&gt;edb update&lt;reset&gt; - Downloads, saves, and loads the latest version of the equipment
            database from https://github.com/weisluke/WoTMUD 
        &lt;yellow&gt;edb triggers&lt;reset&gt; - Enable/disable the equipment stat capture triggers
        &lt;yellow&gt;edb show&lt;reset&gt; - Show all items in the database.
        &lt;yellow&gt;edb show weapons/armor/trinkets&lt;reset&gt; - Show all weapons, armor, or trinkets.
        &lt;yellow&gt;edb show weapons/armor/trinkets name xxx&lt;reset&gt; - Show all weapons, armor or trinkets with
            the given name.
            Ex: edb show weapons name heron, edb show armor name gold,
                edb show trinkets name jeweled
        &lt;yellow&gt;edb show weapons type xxx&lt;reset&gt; - Show all weapons of the given type.
            Ex: edb show weapons type blade, edb show weapons type staff
        &lt;yellow&gt;edb show armor/trinkets slot xxx&lt;reset&gt; - Show all armor or trinkets of the given slot.
            Ex: edb show armor slot head, edb show trinkets slot wrist
            
    Commands for editing items in the database (not typically needed):
    
        &lt;yellow&gt;edb (weapons|armor|trinkets) weight xxx yyy&lt;reset&gt; - Set the weight of an item
        &lt;yellow&gt;edb force (weapons|armor|trinkets) weight xxx yyy&lt;reset&gt; - Force the weight
        &lt;yellow&gt;edb weapons dmg_type xxx yyy&lt;reset&gt; - Set the dmg type for a weapon
        &lt;yellow&gt;edb (armor|trinkets) eq_slot xxx yyy&lt;reset&gt; - Set the eq slot for an item
            Valid armor slots: head, body, arms, hands, legs, feet, shield
            Valid trinket slots: finger, neck, wrist, cloak, belt, sheath
        &lt;yellow&gt;edb (armor|trinkets) setup xxx yyy&lt;reset&gt; - Set the setup for an item
        &lt;yellow&gt;edb force (armor|trinkets) setup xxx yyy&lt;reset&gt; - Force the setup
        &lt;yellow&gt;edb move (armor|trinkets) name xxx (armor|trinkets)&lt;reset&gt; - Move an item from
            one sheet to another
        
        &lt;yellow&gt;edb delete&lt;reset&gt; - Delete the entire database. &lt;red&gt;USE WITH CAUTION!&lt;reset&gt;
        &lt;yellow&gt;edb delete (weapons|armor|trinkets)&lt;reset&gt; - Delete the entire given sheet
        &lt;yellow&gt;edb delete (weapons|armor|trinkets) name xxx&lt;reset&gt; - Delete the item with the
            given name from the given sheet
                    
]]
  cecho(help)
end</script>
				<eventHandlerList />
			</Script>
			<Script isActive="yes" isFolder="no">
				<name>equip_db:reset_eq_info</name>
				<packageName></packageName>
				<script>function equip_db:reset_eq_info()
  self.eq_info = {}
end</script>
				<eventHandlerList />
			</Script>
			<Script isActive="yes" isFolder="no">
				<name>equip_db:update_item</name>
				<packageName></packageName>
				<script>function equip_db:update_item(eq_type, info, exact_name)
  
  if not info.name then
    self:echo("\nAttempt to add item with no name.\n", false, true)
    return
  end
  
  if not table.index_of(table.keys(self.eq_fields), eq_type) then
    self:echo(f"\nEquipment type ({eq_type}) not known.\n", false, true)
    return
  end

  local equipment = db:get_database("equipment")
  
  local items = {}
  
  --need to loop over all sheets, as some items don't display stats
  --present in their sheet
  --e.g., a camouflaged hood doesn't have any abs, so it would register
  --as a trinket. we don't want to create a new trinket item every time
  --we examine the hood, we want to update the one that already exists
  for _, sheet in pairs(table.keys(self.eq_fields)) do
    local tab
    if exact_name then
      tab = db:fetch(equipment[sheet], db:eq(equipment[sheet].name, info.name))
    else
      tab = db:fetch(equipment[sheet], db:like(equipment[sheet].name, "%"..info.name.."%"))
    end
    
    for _, item in pairs(tab) do
      if not table.contains(items, item) then
        table.insert(items, item)
      end
    end
  end
  
  if table.is_empty(items) then
    db:add(equipment[eq_type], info)
    self:echo(f"\nItem ({info.name}) added to the equipment database.\n")   
  elseif table.size(items) &gt; 1 then
    self:echo(f"\nItem ({info.name}) is not unique. Found the following items:\n", false, true)
    for _, item in pairs(items) do
      cecho(item.name.."\n")
    end
  else
    item = items[1]
    --ensure that if we gave a shortcut to the name, we use the proper full name already in the database
    info.name = item.name
    for _, field in pairs(self.eq_fields[eq_type]) do
      if info[field] and item[field] ~= info[field] then
        self:echo(f"\n({field}) for ({item.name}) updated from ({item[field]}) to ({info[field]})\n")
        item[field] = info[field]
      end
    end
    db:update(equipment[eq_type], item)
  end
  
end</script>
				<eventHandlerList />
			</Script>
			<Script isActive="yes" isFolder="no">
				<name>equip_db:db_update</name>
				<packageName></packageName>
				<script>function equip_db:db_update(event, filename)
  --if the file that downloaded is not the database, return
  if not filename:find("Database_equipment.db", 1, true) then
    return
  end
  self:echo("Download complete.\n")
  self:create_db()
end

registerAnonymousEventHandler("sysDownloadDone", "equip_db:db_update")</script>
				<eventHandlerList />
			</Script>
			<ScriptGroup isActive="yes" isFolder="yes">
				<name>Get items</name>
				<packageName></packageName>
				<script></script>
				<eventHandlerList />
				<Script isActive="yes" isFolder="no">
					<name>equip_db:get_weapons</name>
					<packageName></packageName>
					<script>local function sort_weapons(e1, e2)
  --sort first by weapon type, then hands, then ob, then pb, then dmg

  if e1.weapon_type &lt; e2.weapon_type then
    return true
  elseif e1.weapon_type &gt; e2.weapon_type then
    return false
  else
    if e1.hands &gt; e2.hands then
      return true
    elseif e1.hands &lt; e2.hands then
      return false
    else
      if e1.ob &gt; e2.ob then
        return true
      elseif e1.ob &lt; e2.ob then
        return false
      else
        if e1.pb &gt; e2.pb then
          return true
        elseif e1.pb &lt; e2.pb then
          return false
        else
          local dmg1 = e1.dmg
          local dmg2 = e2.dmg
          
          local x1 = dmg1:match("(%d+)d%d+")
          local y1 = dmg1:match("%d+d(%d+)")
          
          local x2 = dmg2:match("(%d+)d%d+")
          local y2 = dmg2:match("%d+d(%d+)")
          
          if x1*(y1 + 1)/2 &gt; x2*(y2 + 1)/2 then
            return true
          elseif x1*(y1 + 1)/2 &lt; x2*(y2 + 1)/2 then
            return false
          else
            return true
          end      
        end
      end
    end
  end
end

function equip_db:get_weapons(name, name_exact, weapon_type, weapon_type_exact)
  local equipment = db:get_database("equipment")
  
  name = name or ""
  weapon_type = weapon_type or ""
  
  local weapons
  
  if name_exact then
    if weapon_type_exact then
      weapons = db:fetch(equipment.weapons, 
          db:AND(
            db:eq(equipment.weapons.name, name), 
            db:eq(equipment.weapons.weapon_type, weapon_type)
          )
      )
    else
      weapons = db:fetch(equipment.weapons, 
          db:AND(
            db:eq(equipment.weapons.name, name), 
            db:like(equipment.weapons.weapon_type, f"%{weapon_type}%")
          )
      )
    end
  else
    if weapon_type_exact then
      weapons = db:fetch(equipment.weapons, 
          db:AND(
            db:like(equipment.weapons.name, f"%{name}%"), 
            db:eq(equipment.weapons.weapon_type, weapon_type)
          )
      )
    else
      weapons = db:fetch(equipment.weapons, 
          db:AND(
            db:like(equipment.weapons.name, f"%{name}%"), 
            db:like(equipment.weapons.weapon_type, f"%{weapon_type}%")
          )
      )
    end
  end
  
  local sorted = false
  
  --sometimes sorting once doesn't do the trick, for some odd reason
  repeat
    table.sort(weapons, sort_weapons)
    sorted = true
  
    for i=1, table.size(weapons)-1, 1 do
      if not sort_weapons(weapons[i], weapons[i+1]) then
        sorted = false
      end
    end
  until(sorted)
  
  return weapons
end

</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>equip_db:get_armor</name>
					<packageName></packageName>
					<script>local function sort_armor(e1, e2)
  --sort first by setup, then eq slot, then abs, then db, then pb, then mvs
  
  local order = {"", "head", "body", "arms", "hands", "legs", "feet", "shield"}
  
  if e1.setup &lt; e2.setup then
    return true
  elseif e1.setup &gt; e2.setup then
    return false
  else
    if table.index_of(order, e1.eq_slot) &lt; table.index_of(order, e2.eq_slot) then
      return true
    elseif table.index_of(order, e1.eq_slot) &gt; table.index_of(order, e2.eq_slot) then
      return false
    else
      if e1.abs &gt; e2.abs then
        return true
      elseif e1.abs &lt; e2.abs then
        return false
      else
        if e1.db &gt; e2.db then
          return true
        elseif e1.db &lt; e2.db then
          return false
        else
          if e1.pb &gt; e2.pb then
            return true
          elseif e1.pb &lt; e2.pb then
            return false
          else
            if e1.mvs &gt; e2.mvs then
              return true
            elseif e1.mvs &lt; e2.mvs then
              return false
            else
              return true
            end
          end
        end
      end
    end
  end
end

function equip_db:get_armor(name, name_exact, eq_slot, eq_slot_exact)
  local equipment = db:get_database("equipment")
  
  name = name or ""
  eq_slot = eq_slot or ""
  
  local armor
  
  if name_exact then
    if eq_slot_exact then
      armor = db:fetch(equipment.armor, 
        db:AND(
          db:eq(equipment.armor.name, name), 
          db:eq(equipment.armor.eq_slot, eq_slot)
        )
      )
    else
      armor = db:fetch(equipment.armor, 
        db:AND(
          db:eq(equipment.armor.name, name), 
          db:like(equipment.armor.eq_slot, f"%{eq_slot}%")
        )
      )
    end
  else
    if eq_slot_exact then
      armor = db:fetch(equipment.armor, 
        db:AND(
          db:like(equipment.armor.name, f"%{name}%"), 
          db:eq(equipment.armor.eq_slot, eq_slot)
        )
      )
    else
      armor = db:fetch(equipment.armor, 
        db:AND(
          db:like(equipment.armor.name, f"%{name}%"), 
          db:like(equipment.armor.eq_slot, f"%{eq_slot}%")
        )
      )
    end  
  end
  
  local sorted = false
  
  --sometimes sorting once doesn't do the trick, for some odd reason
  repeat
    table.sort(armor, sort_armor)
    sorted = true
  
    for i=1, table.size(armor)-1, 1 do
      if not sort_armor(armor[i], armor[i+1]) then
        sorted = false
      end
    end
  until(sorted)
  
  return armor
end

</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>equip_db:get_trinkets</name>
					<packageName></packageName>
					<script>local function sort_trinkets(e1, e2)
  --sort first by setup, then eq slot, then db, then pb, then mvs
  
  local order = {"", "finger", "neck", "wrist", "cloak", "belt", "sheath"}
  
  if e1.setup &lt; e2.setup then
    return true
  elseif e1.setup &gt; e2.setup then
    return false
  else
    if table.index_of(order, e1.eq_slot) &lt; table.index_of(order, e2.eq_slot) then
      return true
    elseif table.index_of(order, e1.eq_slot) &gt; table.index_of(order, e2.eq_slot) then
      return false
    else
      if e1.db &gt; e2.db then
        return true
      elseif e1.db &lt; e2.db then
        return false
      else
        if e1.pb &gt; e2.pb then
          return true
        elseif e1.pb &lt; e2.pb then
          return false
        else
          if e1.mvs &gt; e2.mvs then
            return true
          elseif e1.mvs &lt; e2.mvs then
            return false
          else
            return true
          end
        end
      end
    end
  end
end

function equip_db:get_trinkets(name, name_exact, eq_slot, eq_slot_exact)
  local equipment = db:get_database("equipment")
  
  name = name or ""
  eq_slot = eq_slot or ""
  
  local trinkets
  
  if name_exact then
    if eq_slot_exact then
      trinkets = db:fetch(equipment.trinkets, 
          db:AND(
            db:eq(equipment.trinkets.name, name), 
            db:eq(equipment.trinkets.eq_slot, eq_slot)
          )
      )
    else
      trinkets = db:fetch(equipment.trinkets, 
          db:AND(
            db:eq(equipment.trinkets.name, name), 
            db:like(equipment.trinkets.eq_slot, f"%{eq_slot}%")
          )
      )
    end
  else
    if eq_slot_exact then
      trinkets = db:fetch(equipment.trinkets, 
          db:AND(
            db:like(equipment.trinkets.name, f"%{name}%"), 
            db:eq(equipment.trinkets.eq_slot, eq_slot)
          )
      )
    else
      trinkets = db:fetch(equipment.trinkets, 
          db:AND(
            db:like(equipment.trinkets.name, f"%{name}%"), 
            db:like(equipment.trinkets.eq_slot, f"%{eq_slot}%")
          )
      )
    end
  end
  
  local sorted = false
  
  --sometimes sorting once doesn't do the trick, for some odd reason
  repeat
    table.sort(trinkets, sort_trinkets)
    sorted = true
  
    for i=1, table.size(trinkets)-1, 1 do
      if not sort_trinkets(trinkets[i], trinkets[i+1]) then
        sorted = false
      end
    end
  until(sorted)
  
  return trinkets
end</script>
					<eventHandlerList />
				</Script>
			</ScriptGroup>
			<ScriptGroup isActive="yes" isFolder="yes">
				<name>Show database items</name>
				<packageName></packageName>
				<script></script>
				<eventHandlerList />
				<Script isActive="yes" isFolder="no">
					<name>equip_db:show_weapons</name>
					<packageName></packageName>
					<script>function equip_db:show_weapons(name, name_exact, weapon_type, weapon_type_exact)
  
  local weapons = self:get_weapons(name, name_exact, weapon_type, weapon_type_exact)
  
  if table.is_empty(weapons) then
    self:echo("No weapons found in the equipment database.\n", false, true)
  else
    cecho("WEAPONS\n\n")
    local msg_format = "%-45s%s%-7s%-15s%-5s%-5s%-7s%-6s%-9s\n"
    cecho(string.format(msg_format, "Name", "", "Hands", "Weapon Type", "OB", "PB", "Dmg", "Wt", "Dmg Type"))    
    
    for _, item in pairs(weapons) do
    
      if string.len(item.name) &lt; 45 then
        msg_format = "%-45s%s%-7s%-15s%-5s%-5s%-7s%-6s%-9s\n"
      else
        msg_format = "%-45s\n%-45s%-7s%-15s%-5s%-5s%-7s%-6s%-9s\n"
      end
      
      local msg = string.format(msg_format, 
        item.name,
        "",
        item.hands,
        item.weapon_type,
        item.ob, 
        item.pb,
        item.dmg,
        item.weight,
        item.dmg_type
        )
      cecho(msg)
    end
    cecho("\n")
  end
end</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>equip_db:show_armor</name>
					<packageName></packageName>
					<script>function equip_db:show_armor(name, name_exact, eq_slot, eq_slot_exact)
  local armor = self:get_armor(name, name_exact, eq_slot, eq_slot_exact)
  
  if table.is_empty(armor) then
    self:echo("No armor found in the equipment database.\n", false, true)
  else
    cecho("ARMOR\n\n")
    local msg_format = "%-40s%s%-8s%-6s%-6s%-6s%-5s%-6s%-7s\n"
    cecho(string.format(msg_format, "Name", "", "Slot", "DB", "PB", "Abs", "Mvs", "Wt", "Setup"))
    
    for _, item in pairs(armor) do
    
      if string.len(item.name) &lt; 40 then
        msg_format = "%-40s%s%-8s%-6s%-6s%-6s%-5s%-6s%-7s\n"
      else
        msg_format = "%-40s\n%-40s%-8s%-6s%-6s%-6s%-5s%-6s%-7s\n"
      end
      
      local msg = string.format(msg_format, 
        item.name,
        "",
        item.eq_slot,
        item.db, 
        item.pb,
        item.abs,
        item.mvs,
        item.weight,
        item.setup
        )
      cecho(msg)
    end
    cecho("\n")
  end
end</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>equip_db:show_trinkets</name>
					<packageName></packageName>
					<script>function equip_db:show_trinkets(name, name_exact, eq_slot, eq_slot_exact)
  local trinkets = self:get_trinkets(name, name_exact, eq_slot, eq_slot_exact)
  
  if table.is_empty(trinkets) then
    self:echo("No trinkets found in the equipment database.\n", false, true)
  else
    cecho("TRINKETS\n\n")
    local msg_format = "%-40s%s%-8s%-6s%-6s%-5s%-6s%-7s\n"
    cecho(string.format(msg_format, "Name", "", "Slot", "DB", "PB", "Mvs", "Wt", "Setup"))
    
    for _, item in pairs(trinkets) do
    
      if string.len(item.name) &lt; 40 then
        msg_format = "%-40s%s%-8s%-6s%-6s%-5s%-6s%-7s\n"
      else
        msg_format = "%-40s\n%-40s%-8s%-6s%-6s%-5s%-6s%-7s\n"
      end
      
      local msg = string.format(msg_format, 
        item.name,
        "",
        item.eq_slot,
        item.db, 
        item.pb,
        item.mvs,
        item.weight,
        item.setup
        )
      cecho(msg)
    end
    cecho("\n")
  end
end</script>
					<eventHandlerList />
				</Script>
			</ScriptGroup>
			<Script isActive="yes" isFolder="no">
				<name>equip_db sysConnectionEvent</name>
				<packageName></packageName>
				<script>raiseEvent("equip_db:sysConnectionEvent")
</script>
				<eventHandlerList />
			</Script>
		</ScriptGroup>
	</ScriptPackage>
</MudletPackage>
