<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE MudletPackage>
<MudletPackage version="1.001">
	<ScriptPackage>
		<ScriptGroup isActive="yes" isFolder="yes">
			<name>Status Bar Script</name>
			<packageName></packageName>
			<script></script>
			<eventHandlerList />
			<Script isActive="yes" isFolder="no">
				<name>status_bar initializations</name>
				<packageName></packageName>
				<script>status_bar = status_bar or {}

status_bar.configs = status_bar.configs or 
  {
    fontsize = 10,
    visible = true,
    x = "0%",
    y = "-3%",
    w = "60%",
    h = "3%"
  }</script>
				<eventHandlerList />
			</Script>
			<Script isActive="yes" isFolder="no">
				<name>status_bar:echo</name>
				<packageName></packageName>
				<script>function status_bar:echo(what, debug, err)
  --colored tags for message echo
  local main_tag = "&lt;gray&gt;(&lt;white&gt;status_bar&lt;gray&gt;): &lt;white&gt;"
  local debug_tag = "&lt;deep_sky_blue&gt;(&lt;royal_blue&gt;debug&lt;deep_sky_blue&gt;): &lt;white&gt;"
  local err_tag = "&lt;coral&gt;(&lt;red&gt;error&lt;coral&gt;): &lt;white&gt;"
  
  --if debug message and config debug is false, return without echoing
  if debug and not self.configs.dbug then return end
  
  --if start of message is new line, print that before colored tags of message echo
  if what:sub(0,1)=="\n" then
    cecho("\n")
    what = what:sub(2)
  end
  cecho(main_tag)
  if debug then cecho(debug_tag) end
  if err then cecho(err_tag) end
  cecho(what)
end</script>
				<eventHandlerList />
			</Script>
			<Script isActive="yes" isFolder="no">
				<name>status_bar character information</name>
				<packageName></packageName>
				<script>status_bar.char = status_bar.char or
  {
    mood = nil,
    posture = nil,
    hps = {
      max = nil,
      current = nil,
      est_max = nil,
      est_min = nil
    },
    sps = {
      max = nil,
      current = nil,
      est_max = nil,
      est_min = nil
    },
    dps = {
      max = nil,
      current = nil,
      est_max = nil,
      est_min = nil
    },
    mvs = {
      max = nil,
      current = nil,
      est_max = nil,
      est_min = nil
    },
    autoflee = nil,
    fleelag = {
      min = nil,
      max = nil
    },
    charge_pulses = {
      min = nil,
      max = nil
    },
    notice = nil,
    sneak = nil,
    one_power = nil,
    armor = nil,
    int = nil,
    wil = nil,
    con = nil,
  }</script>
				<eventHandlerList />
			</Script>
			<Script isActive="yes" isFolder="no">
				<name>status_bar default tabs</name>
				<packageName></packageName>
				<script>status_bar.tabs =
  {
    "mood",
    "posture",
    "hps",
    "sps_dps",
    "mvs",
    "autoflee",
    "fleelag",
    "charge_pulses",
    "notice",
    "sneak",
    "one_power",
    "armor",
    "smells",
    "tic_timer"
  }

status_bar.tab_settings = status_bar.tab_settings or
  {
    ["mood"] = {display = true, max_chars = 6, default_text = "Mood"},
    ["posture"] = {display = true, max_chars = 9, default_text = "Posture"},
    ["hps"] = {display = true, max_chars = 16, default_text = "Hit Points"},
    ["sps_dps"] = {display = true, max_chars = 16, default_text = "Spell Points"},
    ["mvs"] = {display = true, max_chars = 16, default_text = "Movement Points"},
    ["autoflee"] = {display = true, max_chars = 13, default_text = "Autoflee"},
    ["fleelag"] = {display = true, max_chars = 16, default_text = "Fleelag"},
    ["charge_pulses"] = {display = true, max_chars = 20, default_text = "Charge Pulses"},
    ["notice"] = {display = true, max_chars = 6, default_text = "Notice"},
    ["sneak"] = {display = true, max_chars = 5, default_text = "Sneak"},
    ["one_power"] = {display = true, max_chars = 9, default_text = "One Power"},
    ["armor"] = {display = true, max_chars = 5, default_text = "Armor"},
    ["smells"] = {display = true, max_chars = 10, default_text = "Smells"},
    ["tic_timer"] = {display = true, max_chars = 9, default_text = "Tic Timer"},
  }

</script>
				<eventHandlerList />
			</Script>
			<Script isActive="yes" isFolder="no">
				<name>status_bar:show_status_bar</name>
				<packageName></packageName>
				<script>function status_bar:show_status_bar(bval)

  local visible = bval
  self.configs.visible = visible
  local x, y, w, h = self.configs.x, self.configs.y, self.configs.w, self.configs.h
  
  self.container = self.container or Adjustable.Container:new(
    {
      name = "status_bar.container",
      adjLabelstyle = "background-color:rgba(220,220,220,100%); border: 5px groove grey;",
      buttonstyle=[[
      QLabel{ border-radius: 7px; background-color: rgba(140,140,140,100%);}
      QLabel::hover{ background-color: rgba(160,160,160,50%);}
      ]],
      buttonFontSize = 10,
      buttonsize = 20,
      titleText = "Status Bar",
      titleTxtColor = "black",
      padding = 15
    }
  )
  
  --determine sum of label sizes in characters
  local total_chars = 0
  for _, tab in pairs(self.tabs) do
    --add max chars for the tab to total chars if the tab is being displayed
    --add 2 for an empty space on either end of the string
    if self.tab_settings[tab].display then
      total_chars = total_chars + self.tab_settings[tab].max_chars + 2
    end
  end
  
  --starting position in the status bar (as a percentage of the total width)
  --to be used for the tabs as they are looped over
  local start = 0
  
  for _, tab in pairs(self.tabs) do
    local w = self.tab_settings[tab].max_chars + 2
    --convert chars to a percentage, then slightly downsize so there's space at the end of the status bar
    w = w / total_chars * 100 * 0.997
    local w_str = string.format("%.2f%%", w)
    
  --create labels if necessary
    if not self[tab] then
      self[tab] = Geyser.Label:new({name = "status_bar."..tab, x = "0%", y = "0%", width = w_str, height = "100%"}, self.container)
      self[tab]:echo(self.tab_settings[tab].default_text, "white", "c")
      self[tab]:setStyleSheet([[
        background-color: black;
        border: 1px solid gray;
      ]])
    end
    --set the fontsize
    self[tab]:setFontSize(self.configs.fontsize)
    
    --display and move labels if necessary
    if self.tab_settings[tab].display then
      local start_str = string.format("%.2f%%", start)
      self[tab]:resize(w_str, "100%")
      self[tab]:move(start_str, "0%")
      self[tab]:show()
      start = start + w
    else
      self[tab]:hide()
    end
  end
  
  --show or hide status bar container
  if visible then
    self.container:show()
    self.container:move(x, y)
    self.container:resize(w, h)
    self.container:attachToBorder("bottom")
    self.container:lockContainer("full")
  else
    self.container:hide()
  end

end</script>
				<eventHandlerList />
			</Script>
			<Script isActive="yes" isFolder="no">
				<name>status_bar:resize</name>
				<packageName></packageName>
				<script>function status_bar:resize(event, container_name, width, height, x, y)
  --get main window size
  local mx, my = getMainWindowSize()
  
  --if the Adjustable.Container is the status bar, calculate new values and convert to percentages
  if container_name == "status_bar.container" then
    width = width/mx*100
    height = height/my*100
    y = -height
    self.configs.y = y.."%"
    self.configs.w = width.."%"
    self.configs.h = height.."%"
    
    --set new bottom border as well
    setBorderBottom((height + 1) * my / 100)
  end
  
  --regardless of what item was moved, calculate new status bar x position
  x = getBorderLeft() / mx * 100
  self.configs.x = x.."%"
  
  --save to disk
  table.save(getMudletHomeDir() .. "/status_bar.configs.lua", self.configs)
  
  self:show_status_bar(true)
end

registerAnonymousEventHandler("AdjustableContainerRepositionFinish", "status_bar:resize")</script>
				<eventHandlerList />
			</Script>
			<Script isActive="yes" isFolder="no">
				<name>status_bar:sys_connection</name>
				<packageName></packageName>
				<script>function status_bar:sys_connection(event)
  if io.exists(getMudletHomeDir() .. "/status_bar.configs.lua") then
    table.load(getMudletHomeDir() .. "/status_bar.configs.lua", self.configs)
  end
  self:show_status_bar(true)
end

registerAnonymousEventHandler("sysLoadEvent", "status_bar:sys_connection")
registerAnonymousEventHandler("sysConnectionEvent", "status_bar:sys_connection")</script>
				<eventHandlerList />
			</Script>
			<Script isActive="yes" isFolder="no">
				<name>status_bar:sys_disconnection</name>
				<packageName></packageName>
				<script>function status_bar:sys_disconnection(event)
  status_bar.char = {
    mood = nil,
    posture = nil,
    hps = {
      max = nil,
      current = nil,
      est_max = nil,
      est_min = nil
    },
    sps = {
      max = nil,
      current = nil,
      est_max = nil,
      est_min = nil
    },
    dps = {
      max = nil,
      current = nil,
      est_max = nil,
      est_min = nil
    },
    mvs = {
      max = nil,
      current = nil,
      est_max = nil,
      est_min = nil
    },
    autoflee = nil,
    fleelag = {
      min = nil,
      max = nil
    },
    charge_pulses = {
      min = nil,
      max = nil
    },
    notice = nil,
    sneak = nil,
    one_power = nil,
    armor = nil,
    int = nil,
    wil = nil,
    con = nil,
  }
  --save configuration to disk
  table.save(getMudletHomeDir() .. "/status_bar.configs.lua", self.configs)
end

registerAnonymousEventHandler("sysExitEvent", "status_bar:sys_disconnection")
registerAnonymousEventHandler("sysDisconnectionEvent", "status_bar:sys_disconnection")</script>
				<eventHandlerList />
			</Script>
			<Script isActive="yes" isFolder="no">
				<name>status_bar:status_bar_installer_succes</name>
				<packageName></packageName>
				<script>function status_bar:status_bar_installer_success(event, name)
  --if installed file is not the desired one
  if name ~= "status_bar_scripts" then return end
  self:show_status_bar(true)
end

registerAnonymousEventHandler("sysInstallPackage", "status_bar:status_bar_installer_success")</script>
				<eventHandlerList />
			</Script>
			<ScriptGroup isActive="yes" isFolder="yes">
				<name>Update items on tic</name>
				<packageName></packageName>
				<script></script>
				<eventHandlerList />
				<Script isActive="yes" isFolder="no">
					<name>status_bar:update_fleelag_on_tic</name>
					<packageName></packageName>
					<script>function status_bar:update_fleelag_on_tic(event, exact, is_early, is_late)
  if is_early then
    self.char.wil = self.char.wil or 1
    local fleelag_loss = 1
    if self.char.wil &lt; 12 then
      fleelag_loss = 2
    else
      fleelag_loss = 3
    end
    
    local msg_flee = "Fleelag"
    local msg_charge = "Charge Pulses"
    
    self.char.fleelag.min = self.char.fleelag.min or 0
    self.char.fleelag.max = self.char.fleelag.max or 0
    
    self.char.fleelag.min = math.floor(self.char.fleelag.min / fleelag_loss)
    self.char.fleelag.max = math.floor(self.char.fleelag.max / fleelag_loss)
    
    self.char.charge_pulses.min = math.min(7 + self.char.fleelag.min, 12)
    self.char.charge_pulses.max = math.min(7 + self.char.fleelag.max, 12)
    
    if self.char.fleelag.min == self.char.fleelag.max then
      msg_flee = "Fleelag: "..self.char.fleelag.min
    else
      msg_flee = "Fleelag: "..self.char.fleelag.min.."-"..self.char.fleelag.max
    end
    
    status_bar.fleelag:echo(msg_flee, "white", "c")
    
    if self.char.charge_pulses.min == self.char.charge_pulses.max then
      msg_charge = "Charge Pulses: "..self.char.charge_pulses.min
    else
      msg_charge = "Charge Pulses: "..self.char.charge_pulses.min.."-"..self.char.charge_pulses.max
    end
    
    self.charge_pulses:echo(msg_charge, "white", "c")
  end 
end

registerAnonymousEventHandler("tic", "status_bar:update_fleelag_on_tic")</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>status_bar:update_health_on_tic</name>
					<packageName></packageName>
					<script>function status_bar:update_health_on_tic(event, exact, is_early, is_late)
  if is_early then
    self.char.con = self.char.con or 1
    self.char.hps.max = self.char.hps.max or 1
    local hp_regen = {0, 0, 0, 0, 0, 0, 0, 0, 18, 21, 22, 25, 26, 29, 30, 33, 35, 37, 39}
    
    if self.char.hps.current then
      self.char.hps.est_min = self.char.hps.current
      self.char.hps.est_max = math.min(self.char.hps.current + hp_regen[self.char.con], self.char.hps.max)
      self.char.hps.current = nil
    else
      if self.char.hps.est_max then
        self.char.hps.est_max = math.min(self.char.hps.est_max + hp_regen[self.char.con], self.char.hps.max)
      end
    end
    
    if not self.char.hps.current and self.char.hps.est_min == self.char.hps.est_max then
      self.char.hps.current = self.char.hps.est_min
      self.char.hps.est_min = nil
      self.char.hps.est_max = nil
    end
    
    local msg = "Hit Points"
    if self.char.hps.current then
      msg = "HP: "..self.char.hps.current.."("..self.char.hps.max..")"
    else
      msg = "HP: "..(self.char.hps.est_min or "???").."-"..(self.char.hps.est_max or "???").."("..self.char.hps.max..")"
    end  
    self.hps:echo(msg, "white", "c")
  end
end

registerAnonymousEventHandler("tic", "status_bar:update_health_on_tic")</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>status_bar:update_sps_on_tic</name>
					<packageName></packageName>
					<script>function status_bar:update_sps_on_tic(event, exact, is_early, is_late)
  if is_early then
    self.char.int = self.char.int or 1
    self.char.wil = self.char.wil or 1
    self.char.sps.max = self.char.sps.max or 1
    local sp_regen = math.floor((self.char.int + self.char.wil)/2)
    local sp_loss = -1
    
    if self.char.sps.current then
      self.char.sps.est_min = math.max(self.char.sps.current + sp_loss, 0)
      self.char.sps.est_max = math.min(self.char.sps.current + sp_regen, self.char.sps.max)
      self.char.sps.current = nil
    else
      if self.char.sps.est_min then
        self.char.sps.est_min = math.max(self.char.sps.est_min + sp_loss, 0)
      end
      if self.char.sps.est_max then
        self.char.sps.est_max = math.min(self.char.sps.est_max + sp_regen, self.char.sps.max)
      end
    end
    
    if not self.char.sps.current and self.char.sps.est_min == self.char.sps.est_max then
      self.char.sps.current = self.char.sps.est_min
      self.char.sps.est_min = nil
      self.char.sps.est_max = nil
    end
    
    local msg = "Spell Points"
    if self.char.sps.current then
      msg = "SP: "..self.char.sps.current.."("..self.char.sps.max..")"
    else
      msg = "SP: "..(self.char.sps.est_min or "???").."-"..(self.char.sps.est_max or "???").."("..self.char.sps.max..")"
    end  
    self.sps_dps:echo(msg, "white", "c")
  end
end

registerAnonymousEventHandler("tic", "status_bar:update_sps_on_tic")</script>
					<eventHandlerList />
				</Script>
			</ScriptGroup>
			<ScriptGroup isActive="yes" isFolder="yes">
				<name>Update items with range</name>
				<packageName></packageName>
				<script></script>
				<eventHandlerList />
				<Script isActive="yes" isFolder="no">
					<name>status_bar:update_hps_with_range</name>
					<packageName></packageName>
					<script>function status_bar:update_hps_with_range(hps)
  self.char.hps.max = self.char.hps.max or 1
  local upper_cutoffs = {
      Healthy = 1,
      Scratched = 1 - 1 / self.char.hps.max,
      Hurt = 0.9,
      Wounded = 0.75,
      Battered = 0.5,
      Beaten = 0.3,
      Critical = 0.15,
      Incapacitated = 0
    }
  local lower_cutoffs = {
      Healthy = 1,
      Scratched = 0.9,
      Hurt = 0.75,
      Wounded = 0.5,
      Battered = 0.3,
      Beaten = 0.15,
      Critical = 0,
      Incapacitated = 0
    }
  local upper = math.floor(upper_cutoffs[hps] * self.char.hps.max)
  local lower = math.ceil(lower_cutoffs[hps] * self.char.hps.max)
  
  if self.char.hps.current then
    if self.char.hps.current &lt; lower or self.char.hps.current &gt; upper then
      self.char.hps.est_min = lower
      self.char.hps.est_max = upper
      self.char.hps.current = nil
    end
  else
    if self.char.hps.est_min then
      self.char.hps.est_min = math.min(self.char.hps.est_min, upper)
      self.char.hps.est_min = math.max(self.char.hps.est_min, lower)
    else
      self.char.hps.est_min = lower
    end
    
    if self.char.hps.est_max then
      self.char.hps.est_max = math.min(self.char.hps.est_max, upper)
      self.char.hps.est_max = math.max(self.char.hps.est_max, lower)
    else
      self.char.hps.est_max = upper
    end
  end
  
  if not self.char.hps.current and self.char.hps.est_min == self.char.hps.est_max then
    self.char.hps.current = self.char.hps.est_min
    self.char.hps.est_min = nil
    self.char.hps.est_max = nil
  end
  
  local msg = "Hit Points"
  if self.char.hps.current then
    msg = "HP: "..self.char.hps.current.."("..self.char.hps.max..")"
  else
    msg = "HP: "..(self.char.hps.est_min or "???").."-"..(self.char.hps.est_max or "???").."("..self.char.hps.max..")"
  end  
  self.hps:echo(msg, "white", "c")
end</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>status_bar:update_mvs_with_range</name>
					<packageName></packageName>
					<script>function status_bar:update_mvs_with_range(mvs)
  self.char.mvs.max = self.char.mvs.max or 1
  local upper_cutoffs = {
      Fresh = 1,
      Full = 1 - 1 / self.char.mvs.max,
      Strong = 0.9,
      Tiring = 0.75,
      Winded = 0.5,
      Weary = 0.3,
      Haggard = 0.15,
      Collapsing = 0
    }
  local lower_cutoffs = {
      Fresh = 1, 
      Full = 0.9, 
      Strong = 0.75, 
      Tiring = 0.5, 
      Winded = 0.3, 
      Weary = 0.15, 
      Haggard = 0,
      Collapsing = 0
    }
  local upper = math.floor(upper_cutoffs[mvs] * self.char.mvs.max)
  local lower = math.ceil(lower_cutoffs[mvs] * self.char.mvs.max)
    
  if self.char.mvs.current then
    if self.char.mvs.current &lt; lower or self.char.mvs.current &gt; upper then
      self.char.mvs.est_min = lower
      self.char.mvs.est_max = upper
      self.char.mvs.current = nil
    end
  else
    if self.char.mvs.est_min then
      self.char.mvs.est_min = math.min(self.char.mvs.est_min, upper)
      self.char.mvs.est_min = math.max(self.char.mvs.est_min, lower)
    else
      self.char.mvs.est_min = lower
    end
        
    if self.char.mvs.est_max then
      self.char.mvs.est_max = math.min(self.char.mvs.est_max, upper)
      self.char.mvs.est_max = math.max(self.char.mvs.est_max, lower)
    else
      self.char.mvs.est_max = upper
    end
  end
  
  if not self.char.mvs.current and self.char.mvs.est_min == self.char.mvs.est_max then
    self.char.mvs.current = self.char.mvs.est_min
    self.char.mvs.est_min = nil
    self.char.mvs.est_max = nil
  end
  
  local msg = "Movement Points"
  if self.char.mvs.current then
    msg = "MV: "..self.char.mvs.current.."("..self.char.mvs.max..")"
  else
    msg = "MV: "..(self.char.mvs.est_min or "???").."-"..(self.char.mvs.est_max or "???").."("..self.char.mvs.max..")"
  end  
  self.mvs:echo(msg, "white", "c")
end</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>status_bar:update_sps_with_range</name>
					<packageName></packageName>
					<script>function status_bar:update_sps_with_range(sps)
  self.char.sps.max = self.char.sps.max or 1
  local upper_cutoffs = {
      Bursting = 1,
      Full = 1 - 1 / self.char.sps.max,
      Strong = 0.9,
      Good = 0.5,
      Fading = 0.3,
      Trickling = 0.15,
      None = 0.01,
    }
  local lower_cutoffs = {
      Bursting = 1, 
      Full = 0.9, 
      Strong = 0.5, 
      Good = 0.3, 
      Fading = 0.15, 
      Trickling = 0.01, 
      None = 0
    }
  local upper = math.floor(upper_cutoffs[sps] * self.char.sps.max)
  local lower = math.ceil(lower_cutoffs[sps] * self.char.sps.max)
    
  if self.char.sps.current then
    if self.char.sps.current &lt; lower or self.char.sps.current &gt; upper then
      self.char.sps.est_min = lower
      self.char.sps.est_max = upper
      self.char.sps.current = nil
    end
  else
    if self.char.sps.est_min then
      self.char.sps.est_min = math.min(self.char.sps.est_min, upper)
      self.char.sps.est_min = math.max(self.char.sps.est_min, lower)
    else
      self.char.sps.est_min = lower
    end
    
    if self.char.sps.est_max then
      self.char.sps.est_max = math.min(self.char.sps.est_max, upper)
      self.char.sps.est_max = math.max(self.char.sps.est_max, lower)
    else
      self.char.sps.est_max = upper
    end
  end
  
  if not self.char.sps.current and self.char.sps.est_min == self.char.sps.est_max then
    self.char.sps.current = self.char.sps.est_min
    self.char.sps.est_min = nil
    self.char.sps.est_max = nil
  end
  
  local msg = "Spell Points"
  if self.char.sps.current then
    msg = "SP: "..self.char.sps.current.."("..self.char.sps.max..")"
  else
    msg = "SP: "..(self.char.sps.est_min or "???").."-"..(self.char.sps.est_max or "???").."("..self.char.sps.max..")"
  end  
  self.sps_dps:echo(msg, "white", "c")
end</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>status_bar:update_dps_with_range</name>
					<packageName></packageName>
					<script>function status_bar:update_dps_with_range(dps)
  self.char.dps.max = self.char.dps.max or 1
  local upper_cutoffs = {
      Bursting = 1,
      Full = 1 - 1 / self.char.dps.max,
      Strong = 0.9,
      Good = 0.5,
      Fading = 0.3,
      Trickling = 0.15,
      None = 0.01,
    }
  local lower_cutoffs = {
      Bursting = 1, 
      Full = 0.9, 
      Strong = 0.5, 
      Good = 0.3, 
      Fading = 0.15, 
      Trickling = 0.01, 
      None = 0
    }
  local upper = math.floor(upper_cutoffs[dps] * self.char.dps.max)
  local lower = math.ceil(lower_cutoffs[dps] * self.char.dps.max)
    
  if self.char.dps.current then
    if self.char.dps.current &lt; lower or self.char.dps.current &gt; upper then
      self.char.dps.est_min = lower
      self.char.dps.est_max = upper
      self.char.dps.current = nil
    end
  else
    if self.char.dps.est_min then
      self.char.dps.est_min = math.min(self.char.dps.est_min, upper)
      self.char.dps.est_min = math.max(self.char.dps.est_min, lower)
    else
      self.char.dps.est_min = lower
    end
    
    if self.char.dps.est_max then
      self.char.dps.est_max = math.min(self.char.dps.est_max, upper)
      self.char.dps.est_max = math.max(self.char.dps.est_max, lower)
    else
      self.char.dps.est_max = upper
    end
  end
  
  if not self.char.dps.current and self.char.dps.est_min == self.char.dps.est_max then
    self.char.dps.current = self.char.dps.est_min
    self.char.dps.est_min = nil
    self.char.dps.est_max = nil
  end
  
  local msg = "Dark Power"
  if self.char.dps.current then
    msg = "DP: "..self.char.dps.current.."("..self.char.dps.max..")"
  else
    msg = "DP: "..(self.char.dps.est_min or "???").."-"..(self.char.dps.est_max or "???").."("..self.char.dps.max..")"
  end  
  self.sps_dps:echo(msg, "white", "c")
end</script>
					<eventHandlerList />
				</Script>
			</ScriptGroup>
			<Script isActive="yes" isFolder="no">
				<name>status_bar:update_fleelag</name>
				<packageName></packageName>
				<script>function status_bar:update_fleelag(event, com)
  local msg_flee = "Fleelag"
  local msg_charge = "Charge Pulses"
  
  if com ~= nil then
    if table.contains({"f", "fl", "fle", "flee"}, com:lower()) then
      self.char.fleelag.min = self.char.fleelag.min or 0
      self.char.fleelag.max = self.char.fleelag.max or 0
    
      self.char.fleelag.min = self.char.fleelag.min + 1
      self.char.fleelag.max = self.char.fleelag.max + 2
    
      self.char.charge_pulses.min = math.min(7 + self.char.fleelag.min, 12)
      self.char.charge_pulses.max = math.min(7 + self.char.fleelag.max, 12)
    
      if self.char.fleelag.min == self.char.fleelag.max then
        msg_flee = "Fleelag: "..self.char.fleelag.min
      else
        msg_flee = "Fleelag: "..self.char.fleelag.min.."-"..self.char.fleelag.max
      end
      
      status_bar.fleelag:echo(msg_flee, "white", "c")
      
      if self.char.charge_pulses.min == self.char.charge_pulses.max then
        msg_charge = "Charge Pulses: "..self.char.charge_pulses.min
      else
        msg_charge = "Charge Pulses: "..self.char.charge_pulses.min.."-"..self.char.charge_pulses.max
      end
      
      self.charge_pulses:echo(msg_charge, "white", "c")
    end
  end
end

registerAnonymousEventHandler("sysDataSendRequest", "status_bar:update_fleelag")</script>
				<eventHandlerList />
			</Script>
			<Script isActive="yes" isFolder="no">
				<name>status_bar:update_hps_min_max</name>
				<packageName></packageName>
				<script>function status_bar:update_hps_min_max(mindmg, maxdmg)
  self.char.hps.max = self.char.hps.max or 1
  
  if self.char.hps.current then
    if maxdmg then
      self.char.hps.est_min = math.max(self.char.hps.current - maxdmg, 0)
    end
    if mindmg then
      self.char.hps.est_max = math.max(self.char.hps.current - mindmg, 0)
    end
    self.char.hps.current = nil
  else
    if self.char.hps.est_min then
      if maxdmg then
        self.char.hps.est_min = math.max(self.char.hps.est_min - maxdmg, 0)
      else
        self.char.hps.est_min = nil
      end
    end
    if self.char.hps.est_max then
      if mindmg then
        self.char.hps.est_max = math.max(self.char.hps.est_max - mindmg, 0)
      else
        self.char.hps.est_max = nil
      end
    end
  end
  
  if not self.char.hps.current and self.char.hps.est_min == self.char.hps.est_max then
    self.char.hps.current = self.char.hps.est_min
    self.char.hps.est_min = nil
    self.char.hps.est_max = nil
  end
  
  local msg = "Hit Points"
  if self.char.hps.current then
    msg = "HP: "..self.char.hps.current.."("..self.char.hps.max..")"
  else
    msg = "HP: "..(self.char.hps.est_min or "???").."-"..(self.char.hps.est_max or "???").."("..self.char.hps.max..")"
  end  
  self.hps:echo(msg, "white", "c")
end</script>
				<eventHandlerList />
			</Script>
			<Script isActive="yes" isFolder="no">
				<name>status_bar:update_sps_with_weave</name>
				<packageName></packageName>
				<script>function status_bar:update_sps_with_weave(weave)
  if not weave then return end
  
  local weave_costs = {
    ["armor"] = 5,
    ["blind"] = 10,
    ["call lightning"] = 12,
    ["change weather"] = 7,
    ["chill"] = 10,
    ["contagion"] = 13,
    ["create fog"] = 7,
    ["create food"] = 5,
    ["create phantom object"] = 15,
    ["create water"] = 5,
    ["cure blindness"] = 10,
    ["cure critical wounds"] = 12,
    ["cure fear"] = 10,
    ["cure light wounds"] = 7,
    ["cure poison"] = 12,
    ["cure serious wounds"] = 10,
    ["deafen"] = 10,
    ["earthquake"] = 15,
    ["elemental staff"] = 25,
    ["fear"] = 15,
    ["fireball"] = 15,
    ["flame strike"] = 10,
    ["freeze"] = 15,
    ["gate"] = 40,
    ["hailstorm"] = 10,
    ["hammer of air"] = 12,
    ["heal"] = 50,
    ["hurricane"] = 15,
    ["ice spikes"] = 15,
    ["incinerate"] = 25,
    ["light ball"] = 5,
    ["locate life"] = 12,
    ["locate object"] = 12,
    ["poison"] = 10,
    ["refresh"] = 15,
    ["remove contagion"] = 10,
    ["remove warding"] = 10,
    ["sense warding"] = 10,
    ["shield"] = 0,
    ["silence"] = 10,
    ["sleep"] = 10,
    ["slice weaves"] = 3,
    ["slow"] = 10,
    ["sonic boom"] = 15,
    ["strength"] = 12,
    ["sword of flame"] = 30,
    ["travel"] = 20,
    ["ward object"] = 10,
    ["warding vs damage"] = 25,
    ["warding vs evil"] = 7,
    ["whirlpool"] = 20,
  }
  
  if not weave_costs[weave] then return end
  
  self.char.sps.max = self.char.sps.max or 1
  
  if self.char.sps.current then
    self.char.sps.est_min = math.max(self.char.sps.current - weave_costs[weave], 0)
    self.char.sps.est_max = self.char.sps.current
    self.char.sps.current = nil
  else
    if self.char.sps.est_min then
      self.char.sps.est_min = math.max(self.char.sps.est_min - weave_costs[weave], 0)
    end
  end
  
  if not self.char.sps.current and self.char.sps.est_min == self.char.sps.est_max then
    self.char.sps.current = self.char.sps.est_min
    self.char.sps.est_min = nil
    self.char.sps.est_max = nil
  end
  
  local msg = "Spell Points"
  if self.char.sps.current then
    msg = "SP: "..self.char.sps.current.."("..self.char.sps.max..")"
  else
    msg = "SP: "..(self.char.sps.est_min or "???").."-"..(self.char.sps.est_max or "???").."("..self.char.sps.max..")"
  end  
  self.sps_dps:echo(msg, "white", "c")
  
end</script>
				<eventHandlerList />
			</Script>
			<Script isActive="yes" isFolder="no">
				<name>status_bar:is_weaving</name>
				<packageName></packageName>
				<script>function status_bar:is_weaving(event, com)
  com = com:lower()
  
  if table.contains({"chann", "channe", "channel"}, com:split()[1]) then
    local weave = com:match("'(.+)'")
    
    if weave then
      self:update_sps_with_weave(weave)
    end
  end
end

registerAnonymousEventHandler("sysDataSendRequest", "status_bar:is_weaving")</script>
				<eventHandlerList />
			</Script>
			<Script isActive="yes" isFolder="no">
				<name>status_bar:update_one_power</name>
				<packageName></packageName>
				<script>function status_bar:update_one_power(event, com)  
  if com ~= nil then
    if table.contains({"rel", "rele", "relea", "releas", "release"}, com:lower()) then
      self.one_power:echo("released", "red", "c")
    end
  end
end

registerAnonymousEventHandler("sysDataSendRequest", "status_bar:update_one_power")</script>
				<eventHandlerList />
			</Script>
			<Script isActive="yes" isFolder="no">
				<name>Custom status bar tabs</name>
				<packageName></packageName>
				<script>--Edit lines below (or remove them, they're just examples) to add extra tabs that you want

--Be sure to follow the format EXACTLY

--You can then move this script outside of the status_bar_scripts folder,
--so that it does not get overwritten in the future

--I make no promises that the formatting here will not ever change,
--but I will do my best

--If you encounter issues/have questions, feel free to reach out and ask!

--In addition, once you make your changes, remove this next line or change the true to false
--(it's simply here so that this script doesn't do anything by default)
if true then return end



--the string here is the reference name for the tab (in this case, "target")
--I personally prefer to keep it simple, all lowercase and no spaces (using underscores if needed)
--examples (already used by me): "charge_pulses", "hps", "notice", "tic_timer", "sps_dps"
if not table.index_of(status_bar.tabs, "target") then
  table.insert(status_bar.tabs, "target")
end
if table.index_of(status_bar.tabs, "target") then
  --display: whether or not to show it
  --max_chars: the maximum number of characters that may end up displayed in this tab
  --e.g., for HPs, the longest string in the tab will be of the form "HP: xxx-yyy(zzz)" which is 16 characters
  --default_text: what should the tab initially display. not super important, can use an empty string, but nice
  --to give it something for when mudlet boots up so its not empty
  status_bar.tab_settings["target"] = {display=true, max_chars = 9, default_text = "Target"}
end



--change what tabs are displayed
--the list of default tabs can be found in the "status_bar default tabs" item

--if you hate the charge pulses being shown, here's your chance to hide it!
status_bar.tab_settings["charge_pulses"].display = false
 
--this simply shows the target tab created above. actually displaying your current target
--would require you to add more code to the aliases where you change your target
--this simply provides the framework for allocating a spot for it on the status bar
status_bar.tab_settings["target"].display = true



--Finally, display the status bar with the changes
status_bar:show_status_bar(true)</script>
				<eventHandlerList />
			</Script>
		</ScriptGroup>
	</ScriptPackage>
</MudletPackage>
