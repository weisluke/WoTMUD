<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE MudletPackage>
<MudletPackage version="1.001">
	<ScriptPackage>
		<ScriptGroup isActive="yes" isFolder="yes">
			<name>Practice Trainer</name>
			<packageName></packageName>
			<script></script>
			<eventHandlerList />
			<Script isActive="yes" isFolder="no">
				<name>practice_trainer initializations</name>
				<packageName></packageName>
				<script>practice_trainer = practice_trainer or {configs = {}}
practice_trainer.container =
  practice_trainer.container or
  Adjustable.Container:new(
    {
      name = "practice_trainer.container",
      adjLabelstyle = "background-color:rgba(255,255,255,100%); border: 5px groove grey;",
      buttonstyle =
        [[
      QLabel{ border-radius: 7px; background-color: rgba(140,140,140,100%);}
      QLabel::hover{ background-color: rgba(160,160,160,50%);}
      ]],
      buttonFontSize = 10,
      buttonsize = 20,
      titleText = "Practice Trainer",
      titleTxtColor = "black",
      padding = 15,
      x = "25%",
      y = "10%",
      width = "50%",
      height = "80%",
      autoLoad = false,
      autoSave = false,
    }
  )
practice_trainer.char =
  practice_trainer.char or {str = 19, int = 16, wil = 12, dex = 18, con = 19}
practice_trainer.char.sex = practice_trainer.char.sex or "male"
practice_trainer.char.race = practice_trainer.char.race or "human"
practice_trainer.char.class = practice_trainer.char.class or "hunter"
practice_trainer.char.warder_bond = practice_trainer.char.warder_bond or false

disableTrigger("practice_trainer_hunter")
disableTrigger("practice_trainer_rogue")
disableTrigger("practice_trainer_warrior")</script>
				<eventHandlerList />
			</Script>
			<Script isActive="yes" isFolder="no">
				<name>practice_trainer:echo</name>
				<packageName></packageName>
				<script>function practice_trainer:echo(what, debug, err)
  --colored tags for message echo
  local main_tag = "&lt;white&gt;(&lt;gray&gt;practice_trainer&lt;white&gt;): &lt;white&gt;"
  local debug_tag = "&lt;deep_sky_blue&gt;(&lt;royal_blue&gt;debug&lt;deep_sky_blue&gt;): &lt;white&gt;"
  local err_tag = "&lt;coral&gt;(&lt;red&gt;error&lt;coral&gt;): &lt;white&gt;"
  
  --if debug message and config debug is false, return without echoing
  if debug and not self.configs.dbug then return end
  
  --if start of message is new line, print that before colored tags of message echo
  if what:sub(0,1)=="\n" then
    cecho("\n")
    what = what:sub(2)
  end
  cecho(main_tag)
  if debug then cecho(debug_tag) end
  if err then cecho(err_tag) end
  cecho(what)
end</script>
				<eventHandlerList />
			</Script>
			<Script isActive="yes" isFolder="no">
				<name>practice_trainer style sheets</name>
				<packageName></packageName>
				<script>practice_trainer.style_sheets = practice_trainer.style_sheets or {}

practice_trainer.style_sheets.plus = [[
    background-color: white;
    border-width: 3px;
    border-style: solid;
    border-color: green;
    border-radius: 3px;
  ]]
  
practice_trainer.style_sheets.minus = [[
    background-color: white;
    border-width: 3px;
    border-style: solid;
    border-color: red;
    border-radius: 3px;
  ]]
  
practice_trainer.style_sheets.scrollable = [[
    background-color: white;
    border-width: 3px;
    border-style: solid;
    border-color: gray;
    border-radius: 3px;
  ]]
  
practice_trainer.style_sheets.clickable = [[
    background-color: gray;
    border-width: 3px;
    border-style: solid;
    border-color: gray;
    border-radius: 3px;
  ]]</script>
				<eventHandlerList />
			</Script>
			<ScriptGroup isActive="yes" isFolder="yes">
				<name>Button creation functions</name>
				<packageName></packageName>
				<script></script>
				<eventHandlerList />
				<Script isActive="yes" isFolder="no">
					<name>practice_trainer:container_params</name>
					<packageName></packageName>
					<script>function practice_trainer:container_params(name, x, y, w, h)
  
  return {
    name = name,
    x = f"{x}%",
    y = f"{y}%",
    width = f"{w}%",
    height = f"{h}%",
  }
end

</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>practice_trainer:label_params</name>
					<packageName></packageName>
					<script>function practice_trainer:label_params(name, x, y, w, h, msg, fg, bg)
  msg = msg or ""
  fg = fg or "black"
  bg = bg or "white"
  
  return {
    name = name,
    x = f"{x}%",
    y = f"{y}%",
    width = f"{w}%",
    height = f"{h}%",
    fgColor = fg,
    color = bg,
    message = [[&lt;center&gt;]] .. msg .. [[&lt;/center&gt;]],
  }
end

</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>practice_trainer:command_line_params</name>
					<packageName></packageName>
					<script>function practice_trainer:command_line_params(name, x, y, w, h, msg)
  return {
    name = name,
    x = f"{x}%",
    y = f"{y}%",
    width = f"{w}%",
    height = f"{h}%",
    stylesheet = "border: 1px solid silver;",
  }
end

</script>
					<eventHandlerList />
				</Script>
			</ScriptGroup>
			<Script isActive="yes" isFolder="no">
				<name>practice_trainer practices</name>
				<packageName></packageName>
				<script>practice_trainer.pracs = practice_trainer.pracs or {classes = {"warrior", "rogue", "hunter", "fade"}}
practice_trainer.pracs.rates =
  {
    [6] = {6, 4, 3, 2, 1, 1},
    [7] = {7, 5, 4, 2, 1, 1},
    [8] = {8, 6, 4, 3, 1, 1},
    [9] = {9, 7, 5, 3, 1, 1},
    [10] = {10, 8, 5, 4, 2, 1},
    [11] = {11, 8, 6, 4, 2, 1},
    [12] = {12, 9, 7, 4, 2, 1},
    [13] = {13, 10, 7, 5, 2, 1},
    [14] = {14, 11, 8, 5, 2, 1},
    [15] = {15, 12, 8, 6, 3, 1},
    [16] = {16, 12, 9, 6, 3, 1},
    [17] = {17, 13, 10, 6, 3, 1},
    [18] = {18, 14, 10, 7, 3, 1},
    [19] = {19, 15, 11, 7, 3, 1},
  }
practice_trainer.pracs.warrior =
  {
    "bash",
    "kick",
    "rescue",
    "shield parry",
    "charge",
    "long blades",
    "medium blades",
    "fencing blades",
    "axes",
    "clubs",
    "staves",
    "lances",
    "spears",
    "javelins",
    "polearms",
    "flails",
    "whips",
    "chains",
    "bows",
    "crossbows",
    "slings",
  }
practice_trainer.pracs.rogue =
  {
    "steal",
    "pick",
    "hide",
    "sneak",
    "dodge",
    "attack",
    "backstab",
    "palm",
    "short blades",
    "projectiles",
  }
practice_trainer.pracs.hunter =
  {
    "search",
    "track",
    "ride",
    "wisdom lore",
    "swim",
    "notice",
    "camouflage",
    "ranger sneak",
    "cover tracks",
    "survival",
  }
practice_trainer.pracs.fade =
  {
    "sense",
    "fade",
    "compel",
    "darken",
    "fear",
    "sense channeling"
  }

practice_trainer.warrior = practice_trainer.warrior or {}
practice_trainer.rogue = practice_trainer.rogue or {}
practice_trainer.hunter = practice_trainer.hunter or {}
practice_trainer.fade = practice_trainer.fade or {}
for _, class in pairs(practice_trainer.pracs.classes) do
  practice_trainer[class].pracs = practice_trainer[class].pracs or {}
  practice_trainer[class].percents = practice_trainer[class].percents or {}
  for _, skill in pairs(practice_trainer.pracs[class]) do
    practice_trainer[class].pracs[skill] = practice_trainer[class].pracs[skill] or 0
    practice_trainer[class].percents[skill] = practice_trainer[class].percents[skill] or 0
  end
end
</script>
				<eventHandlerList />
			</Script>
			<Script isActive="yes" isFolder="no">
				<name>practice_trainer practice queue</name>
				<packageName></packageName>
				<script>practice_trainer.pracs.queue = practice_trainer.pracs.queue or {}

function practice_trainer:push_queue(skill)
  table.insert(self.pracs.queue, skill)
end

function practice_trainer:pop_queue(skill)
  local skill_pos =
    table.collect(
      self.pracs.queue,
      function(key, value)
        if value == skill then
          return true
        end
      end
    )
  local max_pos = table.maxn(skill_pos)
  table.remove(self.pracs.queue, max_pos)
end</script>
				<eventHandlerList />
			</Script>
			<Script isActive="yes" isFolder="no">
				<name>practice_trainer info label</name>
				<packageName></packageName>
				<script>local label_name = "info_label"
local w = 50
local h = 26
local x = 25
local y = 62

practice_trainer[label_name] =
  practice_trainer[label_name] or
  Geyser.Label:new(
    practice_trainer:label_params(f"practice_trainer.{label_name}", x, y, w, h),
    practice_trainer.container
  )
practice_trainer[label_name]:setFontSize(10)
practice_trainer[label_name]:setStyleSheet([[
  qproperty-wordWrap: true;
]])
practice_trainer[label_name]:echo(
  [[
  Click the green "+" buttons to increment a practice, stat, sex, race, or class.&lt;br&gt;
  Click the red "-" buttons to decrement a practice, stat, sex, race, or class.&lt;br&gt;
  Scroll with your mouse on the gray practice, stat, sex, race, or class value boxes to increment and decrement.&lt;br&gt;
  Practice setups can be saved or loaded using the input bars below.&lt;br&gt;
  Type "ptrainer setups" to view saved setups.
  ]]
)</script>
				<eventHandlerList />
			</Script>
			<Script isActive="yes" isFolder="no">
				<name>practice_trainer:reset_prac</name>
				<packageName></packageName>
				<script>local label_name = "reset_pracs_label"
local w = 10
local h = 5
local x = 90
local y = 65

practice_trainer[label_name] =
  practice_trainer[label_name] or
  Geyser.Label:new(
    practice_trainer:label_params(f"practice_trainer.{label_name}", x, y, w, h, "Reset"),
    practice_trainer.container
  )
practice_trainer[label_name]:setStyleSheet(practice_trainer.style_sheets.clickable) 
practice_trainer[label_name]:setClickCallback("practice_trainer:reset_pracs")

function practice_trainer:reset_pracs()
  for _, class in pairs(self.pracs.classes) do
    self[class].pracs = {}
    self[class].percents = {}
    for _, skill in pairs(self.pracs[class]) do
      self[class].pracs[skill] = 0
      self[class].percents[skill] = 0
    end
  end
  self.pracs.queue = {}
  self:update_displays()
end</script>
				<eventHandlerList />
			</Script>
			<ScriptGroup isActive="yes" isFolder="yes">
				<name>Save and Load File</name>
				<packageName></packageName>
				<script></script>
				<eventHandlerList />
				<Script isActive="yes" isFolder="no">
					<name>practice_trainer save and load file</name>
					<packageName></packageName>
					<script>practice_trainer.file = practice_trainer.file or {}

local label_name = "save_label"
local w = 30
local h = 5
local x = 32
local y = 90


practice_trainer.file[label_name] =
  practice_trainer.file[label_name] or
  Geyser.Label:new(
    practice_trainer:label_params(f"practice_trainer.file.{label_name}", x, y, w, h, "Type filename and press enter to save:"),
    practice_trainer.container
  )
  
x = x + w
w = 38
label_name = "save_name"
practice_trainer.file[label_name] =
  practice_trainer.file[label_name] or
  Geyser.CommandLine:new(
    practice_trainer:command_line_params(f"practice_trainer.file.{label_name}", x, y, w, h),
    practice_trainer.container
  )
practice_trainer.file[label_name]:setAction(
  function(commandLineInput)
    practice_trainer:save_pracs(commandLineInput)
  end
)

w = 30
x = 32
y = y + h
label_name = "load_label"
practice_trainer.file[label_name] =
  practice_trainer.file[label_name] or
  Geyser.Label:new(
    practice_trainer:label_params(f"practice_trainer.file.{label_name}", x, y, w, h, "Type filename and press enter to load:"),
    practice_trainer.container
  )

x = x + w
w = 38
label_name = "load_name"
practice_trainer.file[label_name] =
  practice_trainer.file[label_name]  or
  Geyser.CommandLine:new(
    practice_trainer:command_line_params(f"practice_trainer.file.{label_name}", x, y, w, h),
    practice_trainer.container
  )
practice_trainer.file[label_name]:setAction(
  function(commandLineInput)
    practice_trainer:load_pracs(commandLineInput)
    practice_trainer:update_displays()
  end
)


--hide the practice trainer after final item has been created,
--otherwise the command line will show
practice_trainer.container:hide()</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>practice_trainer save and load functions</name>
					<packageName></packageName>
					<script>function practice_trainer:save_pracs(fname)
  if not io.exists(f"{getMudletHomeDir()}/practice_trainer") then
    lfs.mkdir(f"{getMudletHomeDir()}/practice_trainer")
  end
  if fname == "" then
    self:echo("No filename provided.\n", false, true)
    return
  end
  if self:pracs_to_level() &gt; 51 then
    self:echo("More than 51 levels required. Cannot save practice setup.\n", false, true)
    return
  end
  local out_table =
    {
      sex = self.char.sex,
      race = self.char.race,
      class = self.char.class,
      warder_bond = self.char.warder_bond,
      str = self.char.str,
      int = self.char.int,
      wil = self.char.wil,
      dex = self.char.dex,
      con = self.char.con,
      warrior = table.deepcopy(self.warrior.pracs),
      rogue = table.deepcopy(self.rogue.pracs),
      hunter = table.deepcopy(self.hunter.pracs),
      fade = table.deepcopy(self.fade.pracs),
      queue = table.deepcopy(self.pracs.queue)
    }
  local out_file = f"{getMudletHomeDir()}/practice_trainer/{fname}.lua"
  self:echo(f"Saving practices to {out_file}\n")
  table.save(out_file, out_table)
  self:echo("Practices saved.\n")
end

function practice_trainer:load_pracs(fname)
  local in_file = f"{getMudletHomeDir()}/practice_trainer/{fname}.lua"
  if not io.exists(in_file) then
    self:echo(f"File {in_file} does not exist.\n",false,true)
    return
  end
  
  local in_table = {}
  
  self:echo(f"Loading practices from {in_file}\n")
  table.load(in_file, in_table)
  
  self.char.sex = in_table.sex
  self.char.race = in_table.race
  self.char.class = in_table.class
  self.char.warder_bond = in_table.warder_bond
  self.char.str = in_table.str
  self.char.int = in_table.int
  self.char.wil = in_table.wil
  self.char.dex = in_table.dex
  self.char.con = in_table.con
  self.warrior.pracs = table.deepcopy(in_table.warrior)
  self.rogue.pracs = table.deepcopy(in_table.rogue)
  self.hunter.pracs = table.deepcopy(in_table.hunter)
  self.fade.pracs = table.deepcopy(in_table.fade)
  self.pracs.queue = table.deepcopy(in_table.queue)
  
  self:echo("Practices loaded.\n")
end</script>
					<eventHandlerList />
				</Script>
			</ScriptGroup>
			<ScriptGroup isActive="yes" isFolder="yes">
				<name>Update Information</name>
				<packageName></packageName>
				<script></script>
				<eventHandlerList />
				<Script isActive="yes" isFolder="no">
					<name>practice_trainer update practice</name>
					<packageName></packageName>
					<script>function practice_trainer:add_practice(class, skill)
  if self.char.race == "trolloc" and (skill == "ride" or skill == "swim") then
    return
  end
  if self.char.race ~= "fade" and table.contains(self.pracs.fade, skill) then
    return
  end
  self[class].pracs[skill] = self[class].pracs[skill] + 1
  self:push_queue(skill)
  if self:pracs_to_level() &gt; 51 then
    self:subtract_practice(class, skill)
  end
  self:update_displays()
end

function practice_trainer:subtract_practice(class, skill)
  if self[class].pracs[skill] &gt; 0 then
    self[class].pracs[skill] = self[class].pracs[skill] - 1
    self:pop_queue(skill)
  end
  self:update_displays()
end

function practice_trainer:practice_scroll(class, skill, event)
  if event.angleDeltaY &gt; 0 then
    self:add_practice(class, skill)
  elseif event.angleDeltaY &lt; 0 then
    self:subtract_practice(class, skill)
  end
end

function practice_trainer:update_practices()
  for _, class in pairs(self.pracs.classes) do
    for _, skill in pairs(self.pracs[class]) do
      while self[class].percents[skill] &gt; 99 do
        self:subtract_practice(class, skill)
      end
    end
  end
end</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>practice_trainer update stats</name>
					<packageName></packageName>
					<script>function practice_trainer:add_stat(stat)
  if self.char.race == "trolloc" and stat == "str" then
    if self.char[stat] &lt; 21 then
      self.char[stat] = self.char[stat] + 1
    end
  else
    if self.char[stat] &lt; 19 then
      self.char[stat] = self.char[stat] + 1
    end
  end
  self:update_displays()
end

function practice_trainer:subtract_stat(stat)
  if stat == "int" or stat == "wil" then
    if self.char[stat] &gt; 3 then
      self.char[stat] = self.char[stat] - 1
    end
  else
    if self.char[stat] &gt; 9 then
      self.char[stat] = self.char[stat] - 1
    end
  end  
  self:update_displays()
end

function practice_trainer:stat_scroll(stat, event)
  if event.angleDeltaY &gt; 0 then
    self:add_stat(stat)
  elseif event.angleDeltaY &lt; 0 then
    self:subtract_stat(stat)
  end
end</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>practice_trainer update sex</name>
					<packageName></packageName>
					<script>function practice_trainer:sex_stipulations()
  if
    self.char.sex == "male" and
    self.char.class == "channeler" and
    not (self.char.race == "human" or self.char.race == "dreadlord")
  then
    self.char.class = "warrior"
  end
end

function practice_trainer:add_sex()
  local tab = {"male", "female"}
  local index = table.index_of(tab, self.char.sex) - 1
  self.char.sex = tab[(index + 1) % table.size(tab) + 1]
  self:sex_stipulations()
  self:update_displays()
end

function practice_trainer:subtract_sex()
  local tab = {"male", "female"}
  local index = table.index_of(tab, self.char.sex) - 1
  self.char.sex = tab[(index - 1) % table.size(tab) + 1]
  self:sex_stipulations()
  self:update_displays()
end

function practice_trainer:sex_scroll(event)
  if event.angleDeltaY &gt; 0 then
    self:add_sex()
  elseif event.angleDeltaY &lt; 0 then
    self:subtract_sex()
  end
end</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>practice_trainer update race</name>
					<packageName></packageName>
					<script>function practice_trainer:race_stipulations(dir)
  if self.char.race == "fade" then
    self.char.class = "fade"
  elseif self.char.race == "dreadlord" then
    self.char.class = "channeler"
  elseif
    self.char.class == "channeler" and
    ((self.char.race == "seanchan" and self.char.sex == "male") or self.char.race == "trolloc" or self.char.race == "grayman")
  then
    self.char.class = "warrior"
  elseif self.char.class == "fade" then
    self.char.class = "warrior"
  end
  
  if self.char.race == "trolloc" then
    while table.contains(self.pracs.queue,"ride") do
      self:subtract_practice("hunter", "ride")
    end
    while table.contains(self.pracs.queue,"swim") do
      self:subtract_practice("hunter", "swim")
    end
  else
    if self.char.str &gt; 19 then
      self.char.str = 19
    end
  end
  
  if self.char.race ~= "fade" then
    for _, prac in pairs(self.pracs.fade) do
      while table.contains(self.pracs.queue, prac) do
        self:subtract_practice("fade", prac)
      end
    end
  end
  
  if self.char.race ~= "human" then
    self.char.warder_bond = false
  end
end

function practice_trainer:add_race()
  local tab = {"human", "seanchan", "trolloc", "fade", "dreadlord", "grayman"}
  local index = table.index_of(tab, self.char.race) - 1
  self.char.race = tab[(index + 1) % table.size(tab) + 1]
  self:race_stipulations(1)
  self:update_displays()
end

function practice_trainer:subtract_race()
  local tab = {"human", "seanchan", "trolloc", "fade", "dreadlord", "grayman"}
  local index = table.index_of(tab, self.char.race) - 1
  self.char.race = tab[(index - 1) % table.size(tab) + 1]
  self:race_stipulations(-1)
  self:update_displays()
end

function practice_trainer:race_scroll(event)
  if event.angleDeltaY &gt; 0 then
    self:add_race()
  elseif event.angleDeltaY &lt; 0 then
    self:subtract_race()
  end
end</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>practice_trainer update class</name>
					<packageName></packageName>
					<script>function practice_trainer:class_stipulations(dir)
  if self.char.race == "fade" then
    self.char.class = "fade"
  elseif self.char.race == "dreadlord" then
    self.char.class = "channeler"
  elseif
    self.char.class == "channeler" and
    (
      (self.char.race == "seanchan" and self.char.sex == "male") or
      self.char.race == "trolloc" or
      self.char.race == "grayman"
    )
  then
    if dir == 1 then
      self:add_class()
    elseif dir == -1 then
      self:subtract_class()
    end
  elseif self.char.class == "fade" and self.char.race ~= "fade" then
    if dir == 1 then
      self:add_class()
    elseif dir == -1 then
      self:subtract_class()
    end
  end
  
  if self.char.class == "channeler" then
    self.char.warder_bond = false
  end
end

function practice_trainer:add_class()
  local tab = {"warrior", "rogue", "hunter", "channeler", "fade"}
  local index = table.index_of(tab, self.char.class) - 1
  self.char.class = tab[(index + 1) % table.size(tab) + 1]
  self:class_stipulations(1)
  self:update_displays()
end

function practice_trainer:subtract_class()
  local tab = {"warrior", "rogue", "hunter", "channeler", "fade"}
  local index = table.index_of(tab, self.char.class) - 1
  self.char.class = tab[(index - 1) % table.size(tab) + 1]
  self:class_stipulations(-1)
  self:update_displays()
end

function practice_trainer:class_scroll(event)
  if event.angleDeltaY &gt; 0 then
    self:add_class()
  elseif event.angleDeltaY &lt; 0 then
    self:subtract_class()
  end
end</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>practice_trainer update warder bond</name>
					<packageName></packageName>
					<script>function practice_trainer:warder_bond_scroll(event)
  if self.char.race ~= "human" or self.char.class == "channeler" then return end
  self.char.warder_bond = not self.char.warder_bond
  self:update_displays()
end</script>
					<eventHandlerList />
				</Script>
			</ScriptGroup>
			<ScriptGroup isActive="yes" isFolder="yes">
				<name>Convert Information</name>
				<packageName></packageName>
				<script></script>
				<eventHandlerList />
				<Script isActive="yes" isFolder="no">
					<name>practice_trainer practice to percent</name>
					<packageName></packageName>
					<script>function practice_trainer:get_skill_class(skill)
  for _, class in pairs(self.pracs.classes) do
    if table.contains(self.pracs[class], skill) then
      return class
    end
  end
  return nil
end

function practice_trainer:add_percent(class, skill)
  local start_rates =
    {
      warrior = math.floor(self.char.str / 2) + math.floor(self.char.dex / 4) + math.floor(self.char.con / 4),
      rogue = math.floor(self.char.dex * 3 / 4) + math.floor(self.char.int / 4),
      hunter = math.floor((self.char.str + self.char.int + self.char.wil + self.char.dex) / 4),
      fade = math.floor(self.char.int)
    }
  local rate_factor = 1
  if skill == "steal" or skill == "palm" or skill == "swim" or skill == "cover tracks" then
    rate_factor = 1.5
  end
  if skill == "sense channeling" then
    rate_factor = 2
  end
  local prac_percent = self[class].percents[skill]
  if prac_percent &lt;= 20 then
    prac_percent =
      prac_percent + math.floor(rate_factor * self.pracs.rates[start_rates[class]][1])
  elseif prac_percent &lt;= 40 then
    prac_percent =
      prac_percent + math.floor(rate_factor * self.pracs.rates[start_rates[class]][2])
  elseif prac_percent &lt;= 60 then
    prac_percent =
      prac_percent + math.floor(rate_factor * self.pracs.rates[start_rates[class]][3])
  elseif prac_percent &lt;= 80 then
    prac_percent =
      prac_percent + math.floor(rate_factor * self.pracs.rates[start_rates[class]][4])
  elseif prac_percent &lt;= 90 then
    prac_percent =
      prac_percent + math.floor(rate_factor * self.pracs.rates[start_rates[class]][5])
  else
    prac_percent =
      prac_percent + math.floor(rate_factor * self.pracs.rates[start_rates[class]][6])
  end
  self[class].percents[skill] = prac_percent
end

function practice_trainer:prac_residuals(skill)

  if skill == "short blades" then
    for k, v in pairs({"long blades", "medium blades", "fencing blades"}) do
      self.warrior.percents[v] = math.max(self.warrior.percents[v], math.floor(self.rogue.percents["short blades"]*0.4))
    end
  end
  
  if table.contains({"long blades", "medium blades", "fencing blades"}, skill) then
    for k, v in pairs({"long blades", "medium blades", "fencing blades"}) do
      self.warrior.percents[v] = math.max(self.warrior.percents[v], math.floor(self.warrior.percents[skill]*0.4))
    end
  end
  
  if skill == "projectiles" then
    for k, v in pairs({"bows", "crossbows", "slings"}) do
      self.warrior.percents[v] = math.max(self.warrior.percents[v], math.floor(self.rogue.percents["projectiles"]*0.4))
    end
  end
  
  if table.contains({"bows", "crossbows", "slings"}, skill) then
    for k, v in pairs({"bows", "crossbows", "slings"}) do
      self.warrior.percents[v] = math.max(self.warrior.percents[v], math.floor(self.warrior.percents[skill]*0.4))
    end
  end
  
  if table.contains({"axes", "clubs", "staves"}, skill) then
    for k, v in pairs({"axes", "clubs", "staves"}) do
      self.warrior.percents[v] = math.max(self.warrior.percents[v], math.floor(self.warrior.percents[skill]*0.4))
    end
  end
  
  if table.contains({"lances", "spears", "javelins", "polearms"}, skill) then
    for k, v in pairs({"lances", "spears", "javelins", "polearms"}) do
      self.warrior.percents[v] = math.max(self.warrior.percents[v], math.floor(self.warrior.percents[skill]*0.4))
    end
  end
  
  if table.contains({"flails", "whips", "chains"}, skill) then
    for k, v in pairs({"flails", "whips", "chains"}) do
      self.warrior.percents[v] = math.max(self.warrior.percents[v], math.floor(self.warrior.percents[skill]*0.4))
    end
  end
  
  if skill == "hide" then
    self.hunter.percents["camouflage"] = math.max(self.hunter.percents["camouflage"], math.floor(self.rogue.percents["hide"]*0.4))
  end
  
  if skill == "camouflage" then
    self.rogue.percents["hide"] = math.max(self.rogue.percents["hide"], math.floor(self.hunter.percents["camouflage"]*0.4))
  end
  
  if skill == "sneak" then
    self.hunter.percents["ranger sneak"] = math.max(self.hunter.percents["ranger sneak"], math.floor(self.rogue.percents["sneak"]*0.4))
  end
  
  if skill == "ranger sneak" then
    self.rogue.percents["sneak"] = math.max(self.rogue.percents["sneak"], math.floor(self.hunter.percents["ranger sneak"]*0.4))
  end

end

function practice_trainer:update_percents()
  for _, class in pairs(self.pracs.classes) do
    for _, skill in pairs(self.pracs[class]) do
      self[class].percents[skill] = 0
    end
  end

  for _, skill in pairs(self.pracs.queue) do
    local class = self:get_skill_class(skill)
    self:add_percent(class, skill)
    self:prac_residuals(skill)
  end
end</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>practice_trainer practice to level</name>
					<packageName></packageName>
					<script>function practice_trainer:get_total_class_pracs()
  local prac_totals = {}
  
  for _, class in pairs(self.pracs.classes) do
    prac_totals[class] = 0
    for _, skill in pairs(self.pracs[class]) do
      prac_totals[class] = prac_totals[class] + self[class].pracs[skill]
    end
  end
  return prac_totals
end

function practice_trainer:get_total_pracs()
  local prac_totals = self:get_total_class_pracs()
  if self.char.class == "warrior" then
    return prac_totals.warrior + 3*prac_totals.rogue + 2*prac_totals.hunter
  elseif self.char.class == "rogue" then
    return 3*prac_totals.warrior + prac_totals.rogue + 2*prac_totals.hunter
  elseif self.char.class == "hunter" then
    return 2*prac_totals.warrior + 2*prac_totals.rogue + prac_totals.hunter
  elseif self.char.class == "fade" then
    return prac_totals.warrior + prac_totals.rogue + prac_totals.hunter + prac_totals.fade
  elseif self.char.class == "channeler" then
    if self.char.sex == "male" then
      return 3*prac_totals.warrior + 3*prac_totals.rogue + 2*prac_totals.hunter
    else
      return 4*prac_totals.warrior + 3*prac_totals.rogue + 2*prac_totals.hunter
    end
  end
  --return error if something unknown passes through here
  return nil
end

function practice_trainer:pracs_to_level()
  local prac_gain = {human = 5, seanchan = 5, trolloc = 3, fade = 4, dreadlord = 5, grayman = 5}
  
  local level = 1
  local pracs = 8
  
  if self.char.warder_bond then
    pracs = pracs + 10
  end
  
  while pracs &lt; self:get_total_pracs() do
    if level &lt; 30 then
      pracs = pracs + prac_gain[self.char.race]
    else
      pracs = pracs + 2
    end
    level = level + 1
  end
  return level
end</script>
					<eventHandlerList />
				</Script>
			</ScriptGroup>
			<ScriptGroup isActive="yes" isFolder="yes">
				<name>Displays</name>
				<packageName></packageName>
				<script></script>
				<eventHandlerList />
				<Script isActive="yes" isFolder="no">
					<name>practice_trainer warrior/rogue/hunter/fade practices displays</name>
					<packageName></packageName>
					<script>practice_trainer.warrior.container =
  practice_trainer.warrior.container or
  Geyser.Container:new(
    practice_trainer:container_params("practice_trainer.warrior.container", 0, 0, 22, 90),
    practice_trainer.container
  )
practice_trainer.rogue.container =
  practice_trainer.rogue.container or
  Geyser.Container:new(
    practice_trainer:container_params("practice_trainer.rogue.container", 23, 0, 22, 90),
    practice_trainer.container
  )
practice_trainer.hunter.container =
  practice_trainer.hunter.container or
  Geyser.Container:new(
    practice_trainer:container_params("practice_trainer.hunter.container", 46, 0, 30, 90),
    practice_trainer.container
  )
practice_trainer.fade.container =
  practice_trainer.fade.container or
  Geyser.Container:new(
    practice_trainer:container_params("practice_trainer.fade.container", 77, 0, 23, 90),
    practice_trainer.container
  )
  
local colors = {warrior = "sienna", rogue = "dark_slate_gray", hunter = "yellow_green", fade = "black"}
for _, class in pairs(practice_trainer.pracs.classes) do
  practice_trainer[class].label =
    practice_trainer[class].label or
    Geyser.Label:new(
      practice_trainer:label_params(f"practice_trainer.{class}.label", 0, 0, 100, 4, class, "black", colors[class]),
      practice_trainer[class].container
    )
  if class == "fade" then
    practice_trainer[class].label:setFgColor("white")
  end
end

for _, class in pairs(practice_trainer.pracs.classes) do
  for k, prac in pairs(practice_trainer.pracs[class]) do
    local label_name = ""
    local w = 65
    local h = 4
    local x = 0
    local y = k * h + 1
    
    label_name = f"{prac}_label"
    practice_trainer[class][label_name] =
      practice_trainer[class][label_name] or
      Geyser.Label:new(
        practice_trainer:label_params(f"practice_trainer.{class}.{label_name}", x, y, w, h, prac),
        practice_trainer[class].container
      )
    if prac == "ride" or prac == "wisdom lore" or prac == "survival" then
      local value = math.floor(practice_trainer[class].percents[prac] / 14)
      practice_trainer[class][label_name]:echo(f"&lt;center&gt;{prac} (level {value})")
    end
    
    x = x + w
    w = 15
    label_name = f"{prac}_%_label"
    practice_trainer[class][label_name] =
      practice_trainer[class][label_name] or
      Geyser.Label:new(
        practice_trainer:label_params(f"practice_trainer.{class}.{label_name}", x, y, w, h, f"{practice_trainer[class].pracs[prac]}%"),
        practice_trainer[class].container
      )
    practice_trainer[class][label_name]:setStyleSheet(practice_trainer.style_sheets.scrollable)
    setLabelWheelCallback(
      f"practice_trainer.{class}.{label_name}",
      "practice_trainer:practice_scroll",
      class,
      prac
    )
    
    x = x + w
    w = 10
    label_name = f"{prac}_-_label"
    practice_trainer[class][label_name] =
      practice_trainer[class][label_name] or
      Geyser.Label:new(
        practice_trainer:label_params(f"practice_trainer.{class}.{label_name}", x, y, w, h, "-"),
        practice_trainer[class].container
      )
    practice_trainer[class][label_name]:setStyleSheet(practice_trainer.style_sheets.minus)
    practice_trainer[class][label_name]:setClickCallback(
      "practice_trainer:subtract_practice", class, prac
    )
    
    x = x + w
    label_name = f"{prac}_+_label"
    practice_trainer[class][label_name] =
      practice_trainer[class][label_name] or
      Geyser.Label:new(
        practice_trainer:label_params(f"practice_trainer.{class}.{label_name}", x, y, w, h, "+"),
        practice_trainer[class].container
      )
    practice_trainer[class][label_name]:setStyleSheet(practice_trainer.style_sheets.plus)
    practice_trainer[class][label_name]:setClickCallback(
      "practice_trainer:add_practice", class, prac
    )
  end
end</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>practice_trainer character stats displays</name>
					<packageName></packageName>
					<script>practice_trainer.char.container =
  practice_trainer.char.container or
  Geyser.Container:new(
    practice_trainer:container_params("practice_trainer.char.container", 25, 45, 75, 15),
    practice_trainer.container
  )
  
for k, stat in pairs({"str", "int", "wil", "dex", "con"}) do
  local label_name = ""
  local w = 6
  local h = 30
  local x = (k - 1) * 20
  local y = 0
  
  label_name = f"{stat}_label"
  practice_trainer.char[label_name] =
    practice_trainer.char[label_name] or
    Geyser.Label:new(
      practice_trainer:label_params(f"practice_trainer.char.{label_name}", x, y, w, h, stat),
      practice_trainer.char.container
    )
    
  x = x + w
  w = 5
  label_name = f"{stat}_val_label"
  practice_trainer.char[label_name] =
    practice_trainer.char[label_name] or
    Geyser.Label:new(
      practice_trainer:label_params(f"practice_trainer.char.{label_name}", x, y, w, h, practice_trainer.char[stat]),
      practice_trainer.char.container
    )
  practice_trainer.char[label_name]:setStyleSheet(practice_trainer.style_sheets.scrollable)
  setLabelWheelCallback(
    f"practice_trainer.char.{label_name}", "practice_trainer:stat_scroll", stat
  )
  
  x = x + w
  w = 4
  label_name = f"{stat}_-_label"
  practice_trainer.char[label_name] =
    practice_trainer.char[label_name] or
    Geyser.Label:new(
      practice_trainer:label_params(f"practice_trainer.char.{label_name}", x, y, w, h, "-"),
      practice_trainer.char.container
    )
  practice_trainer.char[label_name]:setStyleSheet(practice_trainer.style_sheets.minus)
  practice_trainer.char[label_name]:setClickCallback(
    "practice_trainer:subtract_stat", stat
  )
  
  x = x + w
  label_name = f"{stat}_+_label"
  practice_trainer.char[label_name] =
    practice_trainer.char[label_name] or
    Geyser.Label:new(
      practice_trainer:label_params(f"practice_trainer.char.{label_name}", x, y, w, h, "+"),
      practice_trainer.char.container
    )
  practice_trainer.char[label_name]:setStyleSheet(practice_trainer.style_sheets.plus)
  practice_trainer.char[label_name]:setClickCallback("practice_trainer:add_stat", stat)
end</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>practice_trainer character sex/race/class displays</name>
					<packageName></packageName>
					<script>for k, field in pairs({"sex", "race", "class"}) do
  local label_name = ""
  local w = 15
  local h = 30
  local x = (k - 1) * (w + 2)
  local y = 40
  
  label_name = f"{field}_label"
  practice_trainer.char[label_name] =
    practice_trainer.char[label_name] or
    Geyser.Label:new(
      practice_trainer:label_params(f"practice_trainer.char.{label_name}", x, y, w, h, practice_trainer.char[field]),
      practice_trainer.char.container
    )
  practice_trainer.char[label_name]:setStyleSheet(practice_trainer.style_sheets.scrollable)
  setLabelWheelCallback(f"practice_trainer.char.{label_name}", f"practice_trainer:{field}_scroll")
  
  x = x + w/2
  y = y + h
  w = 4
  x = x - w
  label_name = f"{field}_-_label"
  practice_trainer.char[label_name] =
    practice_trainer.char[label_name] or
    Geyser.Label:new(
      practice_trainer:label_params(f"practice_trainer.char.{label_name}", x, y, w, h, "-"),
      practice_trainer.char.container
    )
  practice_trainer.char[label_name]:setStyleSheet(practice_trainer.style_sheets.minus)
  practice_trainer.char[label_name]:setClickCallback(f"practice_trainer:subtract_{field}")
  
  x = x + w
  label_name = f"{field}_+_label"
  practice_trainer.char[label_name] =
    practice_trainer.char[label_name] or
    Geyser.Label:new(
      practice_trainer:label_params(f"practice_trainer.char.{label_name}", x, y, w, h, "+"),
      practice_trainer.char.container
    )
  practice_trainer.char[label_name]:setStyleSheet(practice_trainer.style_sheets.plus)
  practice_trainer.char[label_name]:setClickCallback(f"practice_trainer:add_{field}")
  
end</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>practice_trainer total practice and level displays</name>
					<packageName></packageName>
					<script>local w = 26
local h = 30
local x = 73
local y = 40

practice_trainer.char["total_pracs_label"] =
    practice_trainer.char["total_pracs_label"] or
    Geyser.Label:new(
      practice_trainer:label_params("practice_trainer.char.total_pracs_label", x, y, w, h, f"Practices required: {practice_trainer:get_total_pracs()}"),
      practice_trainer.char.container
    )

y = y + h
practice_trainer.char["level_label"] =
    practice_trainer.char["level_label"] or
    Geyser.Label:new(
      practice_trainer:label_params("practice_trainer.char.level_label", x, y, w, h, f"Levels required: {practice_trainer:pracs_to_level()}"),
      practice_trainer.char.container
    )
</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>practice_trainer warder bond display</name>
					<packageName></packageName>
					<script>local label_name = "warder_bond_label"
local w = 15
local h = 30
local x = 51
local y = 40

practice_trainer.char[label_name] =
    practice_trainer.char[label_name] or
    Geyser.Label:new(
      practice_trainer:label_params(f"practice_trainer.char.{label_name}", x, y, w, h, 
        (practice_trainer.char.warder_bond and "warder bond" or "no warder bond")),
      practice_trainer.char.container
    )
    
if practice_trainer.char.warder_bond then
  practice_trainer.char[label_name]:setStyleSheet(practice_trainer.style_sheets.plus)
else
  practice_trainer.char[label_name]:setStyleSheet(practice_trainer.style_sheets.minus)
end
setLabelWheelCallback(f"practice_trainer.char.{label_name}", "practice_trainer:warder_bond_scroll")
practice_trainer.char[label_name]:setClickCallback("practice_trainer:warder_bond_scroll")</script>
					<eventHandlerList />
				</Script>
			</ScriptGroup>
			<Script isActive="yes" isFolder="no">
				<name>practice_trainer:update_displays</name>
				<packageName></packageName>
				<script>function practice_trainer:update_sex_race_class_display()
  self.char["sex_label"]:echo(f"&lt;center&gt;{self.char.sex}")
  self.char["race_label"]:echo(f"&lt;center&gt;{self.char.race}")
  self.char["class_label"]:echo(f"&lt;center&gt;{self.char.class}")
end

function practice_trainer:update_warder_bond_display()
  self.char["warder_bond_label"]:echo("&lt;center&gt;" .. (self.char.warder_bond and "warder bond" or "no warder bond"))
  if self.char.warder_bond then
    self.char["warder_bond_label"]:setStyleSheet(self.style_sheets.plus)
  else
    self.char["warder_bond_label"]:setStyleSheet(self.style_sheets.minus)
  end
end

function practice_trainer:update_stats_display()
  for _, stat in pairs({"str", "int", "wil", "dex", "con"}) do
    self.char[f"{stat}_val_label"]:echo(f"&lt;center&gt;{self.char[stat]}")
  end
end

function practice_trainer:update_prac_display()
  for _, class in pairs(self.pracs.classes) do
    for k, prac in pairs(self.pracs[class]) do
      self[class][f"{prac}_%_label"]:echo(f"&lt;center&gt;{self[class].percents[prac]}%")
      if prac == "ride" or prac == "wisdom lore" or prac == "survival" then
        local value = math.floor(self[class].percents[prac] / 14)
        self[class][f"{prac}_label"]:echo(f"&lt;center&gt;{prac} (level {value})")
      end
    end
  end
end

function practice_trainer:update_total_pracs_display()
  self.char["total_pracs_label"]:echo(f"&lt;center&gt;Practices required: {self:get_total_pracs()}")
end


function practice_trainer:update_levels_display()
  self.char["level_label"]:echo(f"&lt;center&gt;Levels required: {self:pracs_to_level()}")
end


function practice_trainer:update_displays()
  self:update_percents()
  self:update_practices()
  self:update_sex_race_class_display()
  self:update_warder_bond_display()
  self:update_stats_display()
  self:update_prac_display()
  self:update_total_pracs_display()
  self:update_levels_display()
end</script>
				<eventHandlerList />
			</Script>
			<Script isActive="yes" isFolder="no">
				<name>practice_trainer:show_help</name>
				<packageName></packageName>
				<script>function practice_trainer:show_help()
  local help =
  [[
    &lt;cyan&gt;Practice Trainer Script&lt;reset&gt;

    This script provides a practice trainer you may use to plan out setups.
    
    Below is a brief overview of some commands that this script includes.
    All commands can be found in the appropriate practice trainer folder
    under mudlet aliases.

    &lt;cyan&gt;Commands:&lt;reset&gt;
        &lt;yellow&gt;ptrainer help&lt;reset&gt; - Show this help message.
        &lt;yellow&gt;ptrainer&lt;reset&gt; - Show the practice trainer.
        &lt;yellow&gt;prac circle&lt;reset&gt; - Send commands to practice in all areas while
            in the Circle of Light/Darkness/Ravens
        &lt;yellow&gt;prac warrior/hunter/rogue&lt;reset&gt; - Send all the practices for the given area
        &lt;yellow&gt;ptrainer setups&lt;reset&gt; - Display all stored practice setups. Files located at:
            ]]..getMudletHomeDir()..[[/practice_trainer/
                    
]]
  cecho(help)
end</script>
				<eventHandlerList />
			</Script>
		</ScriptGroup>
	</ScriptPackage>
</MudletPackage>
